{
  "stats": {
    "suites": 9,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2023-04-29T15:17:36.333Z",
    "end": "2023-04-29T15:17:36.729Z",
    "duration": 396,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3a33c45a-82b7-4019-a69b-f22d4b419038",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4d17e4d8-86f9-4a3a-9915-64b111a1f2eb",
          "title": "database",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
          "file": "/test/database.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c4a06ce2-ee0e-4b3f-8040-75f00719d636",
              "title": "connect",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"connect\"",
                  "fullTitle": "database connect \"before each\" hook in \"connect\"",
                  "timedOut": false,
                  "duration": 65,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();  \ntestDatabase = new database(uri,databaseName);",
                  "err": {},
                  "uuid": "5fddc69e-752a-473b-a687-27afca190c6e",
                  "parentUUID": "c4a06ce2-ee0e-4b3f-8040-75f00719d636",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"connect\"",
                  "fullTitle": "database connect \"after each\" hook in \"connect\"",
                  "timedOut": false,
                  "duration": 11,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mongoserver.stop();",
                  "err": {},
                  "uuid": "6eb4f8d2-b2d5-430e-86de-a631cc073f16",
                  "parentUUID": "c4a06ce2-ee0e-4b3f-8040-75f00719d636",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should connect to the database",
                  "fullTitle": "database connect should connect to the database",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const consoleSpy = spy(console,\"log\");\nconst dbMock = {collection : stub()} // mock database collection\nconst clientMock = {\n    connect : stub().resolves() //returns a resolved promise (Which stimulates the condition when database is connected)\n, db : stub().returns(dbMock)}; //returns a mock database\ntestDatabase.client = clientMock;\nawait testDatabase.connect();\nexpect(clientMock.connect.calledOnce).to.be.true;\nexpect(consoleSpy.calledOnce).to.be.true;\nexpect(consoleSpy.firstCall.args[0]).to.equal(\"DB Connection successful\");\nexpect(clientMock.db.calledWith(databaseName)).to.be.true;\nexpect(dbMock.collection.calledWith(\"Users\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"otp\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Problems\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Blogs\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Editorials\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"SubmittedSolutions\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Solved\")).to.be.true;\nconsoleSpy.restore();",
                  "err": {},
                  "uuid": "207bc692-02b0-47a7-8eb8-70fc53c8d366",
                  "parentUUID": "c4a06ce2-ee0e-4b3f-8040-75f00719d636",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "207bc692-02b0-47a7-8eb8-70fc53c8d366"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e257b919-1ada-455f-80d2-94c4d04b7e77",
              "title": "findOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"findOne\"",
                  "fullTitle": "database findOne \"before each\" hook in \"findOne\"",
                  "timedOut": false,
                  "duration": 62,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "50aa2b60-be71-441b-8b89-ad5dfb2febb8",
                  "parentUUID": "e257b919-1ada-455f-80d2-94c4d04b7e77",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"findOne\"",
                  "fullTitle": "database findOne \"after each\" hook in \"findOne\"",
                  "timedOut": false,
                  "duration": 14,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "2ccb823c-0f65-4882-8beb-84b1ac8cac03",
                  "parentUUID": "e257b919-1ada-455f-80d2-94c4d04b7e77",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return a document",
                  "fullTitle": "database findOne should return a document",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21 };\nawait testDatabase.users.insertOne(doc);\n      \n// Call the findOne function with the query object\nconst query = { name: 'user' };\nconst fields = { age:21, _id:0 };\nconst result = await testDatabase.findOne(testDatabase.users, query, fields);\n      \n// Assert that the result matches the expected document\nexpect (result).to.be.an('object');\n  expect (result).to.deep.equal({ age:21 });",
                  "err": {},
                  "uuid": "2dd1c8fd-314e-4f9f-ada0-77d2bfcb3bf1",
                  "parentUUID": "e257b919-1ada-455f-80d2-94c4d04b7e77",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2dd1c8fd-314e-4f9f-ada0-77d2bfcb3bf1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "51794353-9ce3-441a-a5f0-d4d973e9d08b",
              "title": "insertOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"insertOne\"",
                  "fullTitle": "database insertOne \"before each\" hook in \"insertOne\"",
                  "timedOut": false,
                  "duration": 50,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "0c90735a-7de3-4543-afd0-2ecc56d07130",
                  "parentUUID": "51794353-9ce3-441a-a5f0-d4d973e9d08b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"insertOne\"",
                  "fullTitle": "database insertOne \"after each\" hook in \"insertOne\"",
                  "timedOut": false,
                  "duration": 11,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "5542b6ee-dcbd-45a4-af14-b260e521e8c6",
                  "parentUUID": "51794353-9ce3-441a-a5f0-d4d973e9d08b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should insert a document",
                  "fullTitle": "database insertOne should insert a document",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21 };\nlet insertData = await testDatabase.insertOne(testDatabase.users,doc);\n  // Assert that the result matches the expected document\nexpect (insertData.acknowledged).to.equal(true);\nexpect (insertData.insertedId).to.not.equal(null | undefined);",
                  "err": {},
                  "uuid": "faa96e88-dba5-4034-878f-3aa7fa058d66",
                  "parentUUID": "51794353-9ce3-441a-a5f0-d4d973e9d08b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "faa96e88-dba5-4034-878f-3aa7fa058d66"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ce835d0-e7ad-4618-99c2-50a7cb331570",
              "title": "updateOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateOne\"",
                  "fullTitle": "database updateOne \"before each\" hook in \"updateOne\"",
                  "timedOut": false,
                  "duration": 50,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "981dbf63-c6aa-41fd-bada-68a99a2dab76",
                  "parentUUID": "1ce835d0-e7ad-4618-99c2-50a7cb331570",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateOne\"",
                  "fullTitle": "database updateOne \"after each\" hook in \"updateOne\"",
                  "timedOut": false,
                  "duration": 15,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "ee19ce61-5682-4371-ba20-1ad504d13457",
                  "parentUUID": "1ce835d0-e7ad-4618-99c2-50a7cb331570",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return a document",
                  "fullTitle": "database updateOne should return a document",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21,hobby : []};\nawait testDatabase.users.insertOne(doc);\n    \n// Call the findOne function with the query object\nlet query = { name: 'user' };\nlet result = await testDatabase.updateOne(testDatabase.users, query, {$set : {name: \"newUser\"}});\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.modifiedCount).to.equal(1);\nquery = { name: 'newUser' };\nresult = await testDatabase.updateOne(testDatabase.users, query, {$push : {hobby: \"newUser\"}});\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.modifiedCount).to.equal(1);",
                  "err": {},
                  "uuid": "1a4042a5-4838-4252-a391-1fbe86730272",
                  "parentUUID": "1ce835d0-e7ad-4618-99c2-50a7cb331570",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a4042a5-4838-4252-a391-1fbe86730272"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a3f8e812-1b0c-4f9a-bb4d-48d5a10526c0",
              "title": "deleteOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"deleteOne\"",
                  "fullTitle": "database deleteOne \"before each\" hook in \"deleteOne\"",
                  "timedOut": false,
                  "duration": 49,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "d6c7e5cb-5dff-4a00-ade1-74152ae5e7cd",
                  "parentUUID": "a3f8e812-1b0c-4f9a-bb4d-48d5a10526c0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"deleteOne\"",
                  "fullTitle": "database deleteOne \"after each\" hook in \"deleteOne\"",
                  "timedOut": false,
                  "duration": 13,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "666a184d-df3b-44e4-9823-33d7f6bd4122",
                  "parentUUID": "a3f8e812-1b0c-4f9a-bb4d-48d5a10526c0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should delete a document",
                  "fullTitle": "database deleteOne should delete a document",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21};\nawait testDatabase.users.insertOne(doc);\n    \n// Call the findOne function with the query object\nlet query = { name: 'user' };\nlet result = await testDatabase.deleteOne(testDatabase.users, query);\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.deletedCount).to.equal(1);",
                  "err": {},
                  "uuid": "32faaa4e-28d3-4d90-9f3d-511254c1f26c",
                  "parentUUID": "a3f8e812-1b0c-4f9a-bb4d-48d5a10526c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32faaa4e-28d3-4d90-9f3d-511254c1f26c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7d711369-7329-4e13-b8e8-6dfa92bd7882",
          "title": "Email",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
          "file": "/test/email.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "693ac8a6-1d2d-4ec8-af6a-e8d6423d8e39",
              "title": "sendMail",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
              "file": "/test/email.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendMail\"",
                  "fullTitle": "Email sendMail \"before each\" hook in \"sendMail\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "transporter = nodemailer.createTransport(nodemailerMock());\nemail = new Email();\nemail.transporter = transporter;\nemail.sender = \"test92.test@gmail.com\";",
                  "err": {},
                  "uuid": "36f2a237-9f1e-40a8-bb9a-ef71ef17ab47",
                  "parentUUID": "693ac8a6-1d2d-4ec8-af6a-e8d6423d8e39",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"sendMail\"",
                  "fullTitle": "Email sendMail \"after each\" hook in \"sendMail\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "78896aa4-a3df-4107-8f10-3515b40308af",
                  "parentUUID": "693ac8a6-1d2d-4ec8-af6a-e8d6423d8e39",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send an email",
                  "fullTitle": "Email sendMail should send an email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// to track the sendMail function of the email.transporter\nconst sendMailSpy = sinon.spy(email.transporter, \"sendMail\");\nconst receiver = \"nish95.sha@gmail.com\";\nconst subject = \"Test Email\";\nconst text = \"This is a test email.\";\n// call the sendMail function of the email class\nemail.sendMail(receiver, subject, text);\nexpect(sendMailSpy.calledOnce).to.be.true;\nexpect(sendMailSpy.firstCall.args[0]).to.deep.equal({\n  from: email.sender,\n  to: receiver,\n  subject: subject,\n  text: text,\n});",
                  "err": {},
                  "uuid": "f55ef8c3-5f67-45d7-99bd-04298dee86ee",
                  "parentUUID": "693ac8a6-1d2d-4ec8-af6a-e8d6423d8e39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw the error if the email fails to send",
                  "fullTitle": "Email sendMail should throw the error if the email fails to send",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// mock the sendMail function of the email.transporter\nemail.transporter.sendMail = sinon\n  .stub()\n  .yields(\"Failed to send email.\");\n  // to call the callback function of the sendMail function with the error message\nconst receiver = \"recipient@example.com\";\nconst subject = \"Test email\";\nconst text = \"This is a test email.\";\nconst errorMessage = \"Failed to send email.\";\nexpect(() => {\n  email.sendMail(receiver, subject, text);\n}).to.throw(Error, errorMessage);",
                  "err": {},
                  "uuid": "a69718d0-aaf8-45e2-8db9-69b6265e6668",
                  "parentUUID": "693ac8a6-1d2d-4ec8-af6a-e8d6423d8e39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f55ef8c3-5f67-45d7-99bd-04298dee86ee",
                "a69718d0-aaf8-45e2-8db9-69b6265e6668"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "49acfbbf-0074-4ce5-b784-912fe63e6100",
              "title": "sendOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
              "file": "/test/email.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendOTP\"",
                  "fullTitle": "Email sendOTP \"before each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "transporter = nodemailer.createTransport(nodemailerMock());\nemail = new Email();\nemail.transporter = transporter;\nemail.sender = \"test92.test@gmail.com\";\nemail.sendMail = sinon.stub().resolves();",
                  "err": {},
                  "uuid": "bc4729da-899d-4709-9ecb-52032b39104d",
                  "parentUUID": "49acfbbf-0074-4ce5-b784-912fe63e6100",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"sendOTP\"",
                  "fullTitle": "Email sendOTP \"after each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "1d729db3-e74f-4315-a5b7-d7744096d150",
                  "parentUUID": "49acfbbf-0074-4ce5-b784-912fe63e6100",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send an OTP",
                  "fullTitle": "Email sendOTP should send an OTP",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const receiver = \"nish95.sha@gmail.com\";\nconst otp = \"123456\";\nemail.sendOTP(receiver, otp);\nexpect(\n  email.sendMail.calledOnceWithExactly(\n    receiver,\n    \"OTP\",\n    `Your OTP is ${otp}`\n  )\n).to.be.true;",
                  "err": {},
                  "uuid": "100e2736-5b7a-4438-b5cc-5cd2fee65025",
                  "parentUUID": "49acfbbf-0074-4ce5-b784-912fe63e6100",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "100e2736-5b7a-4438-b5cc-5cd2fee65025"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "custom-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "custom-report",
        "reportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}