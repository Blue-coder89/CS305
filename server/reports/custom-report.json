{
  "stats": {
    "suites": 35,
    "tests": 82,
    "passes": 82,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-04T16:28:23.054Z",
    "end": "2023-05-04T16:28:41.877Z",
    "duration": 18823,
    "testsRegistered": 82,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "35edcaf8-7125-4adb-be89-6553ae2d47bb",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "12e83c09-9cc3-4a46-a475-3a4e14f2c262",
          "title": "Blog",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
          "file": "/test/blog.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4cc29812-53d9-4ec5-939e-d88c2f068517",
              "title": "postBlog",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"postBlog\"",
                  "fullTitle": "Blog postBlog \"before each\" hook in \"postBlog\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = {\n  body: {\n    userToken: \"validToken\",\n  },\n};\nres = {\n  send: stub(),\n};\n// Mocking adminJWT, adminDB, and blog objects\nadminJWT = {\n  verifyToken: stub(),\n};\nadminDB = {\n  insertOne: stub(),\n  blog: {},\n};\ntestBlog = new Blog(adminDB, adminJWT);\n// Importing the postBlog function",
                  "err": {},
                  "uuid": "8f36582d-53d7-44cb-8ecf-91054b9e790c",
                  "parentUUID": "4cc29812-53d9-4ec5-939e-d88c2f068517",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"postBlog\"",
                  "fullTitle": "Blog postBlog \"after each\" hook in \"postBlog\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Restoring the stubbed functions\nrestore();",
                  "err": {},
                  "uuid": "5e39f114-b065-41f4-bbed-26c96dbc5166",
                  "parentUUID": "4cc29812-53d9-4ec5-939e-d88c2f068517",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should post a blog and send success response",
                  "fullTitle": "Blog postBlog should post a blog and send success response",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return handle and type\nadminJWT.verifyToken.returns({ handle: handle, type: type });\n// Stubbing adminDB.insertOne to return data\nadminDB.insertOne.returns({});\n// Calling the postBlog function\nawait testBlog.postBlog(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  adminDB.insertOne.calledOnceWith(adminDB.blog, match.instanceOf(blog))\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({ success: true, message: \"Blog posted.\" })\n).to.be.true;",
                  "err": {},
                  "uuid": "26362cea-0465-4a47-907d-78da677792bf",
                  "parentUUID": "4cc29812-53d9-4ec5-939e-d88c2f068517",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle TokenExpiredError and send appropriate response",
                  "fullTitle": "Blog postBlog should handle TokenExpiredError and send appropriate response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw TokenExpiredError\nadminJWT.verifyToken.throws(new TokenExpiredError(\"Token expired\"));\n// Calling the postBlog function\nawait testBlog.postBlog(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "8d648133-0af8-4a84-9af2-74b05dadc8c2",
                  "parentUUID": "4cc29812-53d9-4ec5-939e-d88c2f068517",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors and send error response",
                  "fullTitle": "Blog postBlog should handle other errors and send error response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw an error\nadminJWT.verifyToken.throws(new Error(\"Some error\"));\n// Calling the postBlog function\nawait testBlog.postBlog(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Blog posting failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "691c0d3a-3f4d-4060-9026-cf8594738dab",
                  "parentUUID": "4cc29812-53d9-4ec5-939e-d88c2f068517",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26362cea-0465-4a47-907d-78da677792bf",
                "8d648133-0af8-4a84-9af2-74b05dadc8c2",
                "691c0d3a-3f4d-4060-9026-cf8594738dab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a398b48-bc6b-4449-97ce-5b29641a935b",
              "title": "postEditorial",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"postEditorial\"",
                  "fullTitle": "Blog postEditorial \"before each\" hook in \"postEditorial\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = {\n  body: {\n    userToken: \"validToken\",\n  },\n};\nres = {\n  send: stub(),\n};\n// Mocking adminJWT, adminDB, and editorial objects\nadminJWT = {\n  verifyToken: stub(),\n};\nadminDB = {\n  insertOne: stub(),\n  editorials: \"editorials\",\n};\ntestEditorial = new Blog(adminDB, adminJWT);\n// Importing the postEditorial function",
                  "err": {},
                  "uuid": "bb36dae9-eed9-47d8-9ac9-ccf239db5a96",
                  "parentUUID": "6a398b48-bc6b-4449-97ce-5b29641a935b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"postEditorial\"",
                  "fullTitle": "Blog postEditorial \"after each\" hook in \"postEditorial\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Restoring the stubbed functions\nrestore();",
                  "err": {},
                  "uuid": "05cf4576-1e08-4109-8478-63070a1f0f23",
                  "parentUUID": "6a398b48-bc6b-4449-97ce-5b29641a935b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should post an editorial and send success response",
                  "fullTitle": "Blog postEditorial should post an editorial and send success response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return handle and type\nadminJWT.verifyToken.returns({ handle: handle, type: \"1\" });\n// Stubbing adminDB.insertOne to return data\nadminDB.insertOne.returns({});\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  adminDB.insertOne.calledOnceWith(\n    adminDB.editorials,\n    match.instanceOf(editorial)\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({ success: true, message: \"Editorial posted.\" })\n).to.be.true;",
                  "err": {},
                  "uuid": "f3df74c8-82bf-4889-9be0-41bd9e2a5791",
                  "parentUUID": "6a398b48-bc6b-4449-97ce-5b29641a935b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not post an editorial and send unauthorized response for type 0",
                  "fullTitle": "Blog postEditorial should not post an editorial and send unauthorized response for type 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return handle and type\nadminJWT.verifyToken.returns({ handle: handle, type: \"0\" });\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"You are not authorized to post editorials.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "2258df61-4b7e-47b1-80ed-69654d4a43f6",
                  "parentUUID": "6a398b48-bc6b-4449-97ce-5b29641a935b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle TokenExpiredError and send appropriate response",
                  "fullTitle": "Blog postEditorial should handle TokenExpiredError and send appropriate response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw TokenExpiredError\nadminJWT.verifyToken.throws(new TokenExpiredError(\"Token expired\"));\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "5c48fb7f-13a9-4869-8135-b378959e7179",
                  "parentUUID": "6a398b48-bc6b-4449-97ce-5b29641a935b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors and send error response",
                  "fullTitle": "Blog postEditorial should handle other errors and send error response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw an error\nadminJWT.verifyToken.throws(new Error(\"Some error\"));\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Editorial posting failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "0f3780ba-b5b3-45a5-8a34-6eeda795241f",
                  "parentUUID": "6a398b48-bc6b-4449-97ce-5b29641a935b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors and send error response",
                  "fullTitle": "Blog postEditorial should handle other errors and send error response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw an error\nadminJWT.verifyToken.throws(new Error(\"Some error\"));\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Editorial posting failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "ed5f4c86-e4b9-418d-bda2-658ee07a27f8",
                  "parentUUID": "6a398b48-bc6b-4449-97ce-5b29641a935b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f3df74c8-82bf-4889-9be0-41bd9e2a5791",
                "2258df61-4b7e-47b1-80ed-69654d4a43f6",
                "5c48fb7f-13a9-4869-8135-b378959e7179",
                "0f3780ba-b5b3-45a5-8a34-6eeda795241f",
                "ed5f4c86-e4b9-418d-bda2-658ee07a27f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40646f97-3bb3-421c-913c-d736c0048c04",
              "title": "getBlog",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getBlog\"",
                  "fullTitle": "Blog getBlog \"before each\" hook in \"getBlog\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = {\n  body: {\n    blogId: \"validBlogId1\",\n  },\n};\nres = {\n  send: stub(),\n};\n// Mocking adminDB object\nadminDB = {\n  findOne: stub(),\n  blog: \"blog\",\n};\n// Importing the getBlogComments function\ntestBlog = new Blog(adminDB, {});",
                  "err": {},
                  "uuid": "be952f5f-935c-4518-8f50-76a80032c1cc",
                  "parentUUID": "40646f97-3bb3-421c-913c-d736c0048c04",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get blog comments and send success response",
                  "fullTitle": "Blog getBlog should get blog comments and send success response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedComments = [\"comment1\", \"comment2\"];\n// Stubbing adminDB.findOne to return data with comments\nadminDB.findOne.returns({ comments: expectedComments });\n// Calling the getBlogComments function\nawait testBlog.getBlog(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(\n    adminDB.blog,\n    { _id: new ObjectId(\"validBlogId1\") },\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    data: { comments: expectedComments },\n    success: true,\n    message: \"Data sent successfully.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "60139421-6c1b-4d1d-8b9a-521165cc4921",
                  "parentUUID": "40646f97-3bb3-421c-913c-d736c0048c04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle error and send error response",
                  "fullTitle": "Blog getBlog should handle error and send error response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to throw an error\nadminDB.findOne.throws(new Error(\"Some error\"));\n// Calling the getBlogComments function\nawait testBlog.getBlog(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(\n    adminDB.blog,\n    { _id: new ObjectId(\"validBlogId1\") },\n    \n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Data could not be sent due to some internal error.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "e0913173-2791-4bd9-8431-87282637cbc2",
                  "parentUUID": "40646f97-3bb3-421c-913c-d736c0048c04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60139421-6c1b-4d1d-8b9a-521165cc4921",
                "e0913173-2791-4bd9-8431-87282637cbc2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "029d6c07-5932-4ade-abc0-a37496d92737",
              "title": "getBlogs",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getBlogs\"",
                  "fullTitle": "Blog getBlogs \"before each\" hook in \"getBlogs\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking res object\nres = {\n  send: stub(),\n};\n// Mocking adminDB object\nadminDB = {\n  find:stub(),\n  blog: 'blog',\n};\n// Importing the getBlogs function\ntestBlog = new Blog(adminDB, {});",
                  "err": {},
                  "uuid": "9ba9e653-da64-4c11-9e9f-ddf141fcb7f4",
                  "parentUUID": "029d6c07-5932-4ade-abc0-a37496d92737",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get blogs and send success response",
                  "fullTitle": "Blog getBlogs should get blogs and send success response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedBlogs = ['blog1', 'blog2'];\n// Stubbing adminDB.find to return data with blogs\nadminDB.find.returns(expectedBlogs);\n// Calling the getBlogs function\nawait testBlog.getBlogs({}, res);\n// Assertions\nexpect(adminDB.find.calledOnceWith(adminDB.blog, {}, { timestamp: -1 }, { comments: 0 })).to.be.true;\nexpect(res.send.calledOnceWith({ data: expectedBlogs, success: true, message: 'Blogs sent successfully.' })).to.be.true;",
                  "err": {},
                  "uuid": "65e84d76-9049-4b60-b693-6d4274771e6e",
                  "parentUUID": "029d6c07-5932-4ade-abc0-a37496d92737",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle error and send error response",
                  "fullTitle": "Blog getBlogs should handle error and send error response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.find to throw an error\nadminDB.find.throws(new Error('Some error'));\n// Calling the getBlogs function\nawait testBlog.getBlogs({}, res);\n// Assertions\nexpect(adminDB.find.calledOnceWith(adminDB.blog, {}, { timestamp: -1 }, { comments: 0 })).to.be.true;\nexpect(res.send.calledOnceWith({ success: false, message: 'Blogs could not be sent due to some internal error.' })).to.be.true;",
                  "err": {},
                  "uuid": "bf06a105-e1d8-412a-9ed8-bdb38aa91db1",
                  "parentUUID": "029d6c07-5932-4ade-abc0-a37496d92737",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65e84d76-9049-4b60-b693-6d4274771e6e",
                "bf06a105-e1d8-412a-9ed8-bdb38aa91db1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "56ef7b27-f0fd-4d2e-bf48-a252ac90c25b",
              "title": "comment",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"comment\"",
                  "fullTitle": "Blog comment \"before each\" hook in \"comment\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  updateOne: sinon.stub(),\n  blog: 'blog',\n}\nadminJWT = {\n  verifyToken: sinon.stub(),\n};\nreq = {\n  body: {\n    userToken: 'testToken',\n    Id: 'testId123445',\n    entityType: 'blog',\n    comment: 'testComment',\n    timestamp: Date.now(),\n  },\n};\nres = {\n  send: sinon.spy(),\n};\ncomment = new Blog(adminDB, adminJWT).comment;",
                  "err": {},
                  "uuid": "288cc370-4a2a-48b4-aa87-f2b86f09859d",
                  "parentUUID": "56ef7b27-f0fd-4d2e-bf48-a252ac90c25b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should post a comment to a blog or editorial",
                  "fullTitle": "Blog comment should post a comment to a blog or editorial",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodeData = { handle: 'testHandle' };\nconst updateResult = { modifiedCount: 1 };\nconst expectedComment = {\n  handle: decodeData.handle,\n  comment: req.body.comment,\n  timestamp: req.body.timestamp,\n};\nadminJWT.verifyToken.returns(decodeData);\nadminDB.updateOne.returns(updateResult);\nawait comment(req, res);\nexpect(adminJWT.verifyToken.calledOnce).to.be.true;\nexpect(adminJWT.verifyToken.firstCall.args[0]).to.equal(req.body.userToken);\nexpect(adminDB.updateOne.calledOnce).to.be.true;\n// expect(adminDB.updateOne.firstCall.args[0]).to.equal(adminDB.blog);\n// expect(adminDB.updateOne.firstCall.args[1]).to.deep.equal({\n//   _id: new ObjectId(req.body.Id),\n// });\n// expect(adminDB.updateOne.firstCall.args[2]).to.deep.equal({\n//   $push: {\n//     comments: expectedComment,\n//   },\n// });\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: true,\n  message: 'Comment posted.',\n});",
                  "err": {},
                  "uuid": "2da077eb-0c4e-4786-af7e-f81b92a75007",
                  "parentUUID": "56ef7b27-f0fd-4d2e-bf48-a252ac90c25b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle token expired errors",
                  "fullTitle": "Blog comment should handle token expired errors",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expiredError = new TokenExpiredError('TokenExpiredError');\nadminJWT.verifyToken.throws(expiredError);\nawait comment(req, res);\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: 'Token has expired.',\n});",
                  "err": {},
                  "uuid": "91199c1e-24ea-43ee-a1e2-d3fe3f5708b6",
                  "parentUUID": "56ef7b27-f0fd-4d2e-bf48-a252ac90c25b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors",
                  "fullTitle": "Blog comment should handle other errors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = 'Error posting comment';\nadminDB.updateOne = sinon.stub().throws(new Error(errorMessage));\nadminJWT.verifyToken.returns({ handle: 'testHandle' });\nawait comment(req, res);\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: 'Comment cannot be posted due to internal error.',\n});",
                  "err": {},
                  "uuid": "856e61ca-500d-4ffd-81cf-1ce0f053986b",
                  "parentUUID": "56ef7b27-f0fd-4d2e-bf48-a252ac90c25b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2da077eb-0c4e-4786-af7e-f81b92a75007",
                "91199c1e-24ea-43ee-a1e2-d3fe3f5708b6",
                "856e61ca-500d-4ffd-81cf-1ce0f053986b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4ba7b1d3-d1ea-4681-9b46-3b2495285c6d",
          "title": "database",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
          "file": "/test/database.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cfb8fe89-a0f7-4aeb-aada-606c6aa9a7e3",
              "title": "connect",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"connect\"",
                  "fullTitle": "database connect \"before each\" hook in \"connect\"",
                  "timedOut": false,
                  "duration": 53,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();  \ntestDatabase = new database(uri,databaseName);",
                  "err": {},
                  "uuid": "d7239dc9-1879-4fb5-8ec9-12c31677127b",
                  "parentUUID": "cfb8fe89-a0f7-4aeb-aada-606c6aa9a7e3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"connect\"",
                  "fullTitle": "database connect \"after each\" hook in \"connect\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mongoserver.stop();",
                  "err": {},
                  "uuid": "ea4f5784-ae21-4e4b-8402-75780feaed46",
                  "parentUUID": "cfb8fe89-a0f7-4aeb-aada-606c6aa9a7e3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should connect to the database",
                  "fullTitle": "database connect should connect to the database",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const consoleSpy = spy(console,\"log\");\nconst dbMock = {collection : stub()} // mock database collection\nconst clientMock = {\n    connect : stub().resolves() //returns a resolved promise (Which stimulates the condition when database is connected)\n, db : stub().returns(dbMock)}; //returns a mock database\ntestDatabase.client = clientMock;\nawait testDatabase.connect();\nexpect(clientMock.connect.calledOnce).to.be.true;\nexpect(consoleSpy.calledOnce).to.be.true;\nexpect(consoleSpy.firstCall.args[0]).to.equal(\"DB Connection successful\");\nexpect(clientMock.db.calledWith(databaseName)).to.be.true;\nexpect(dbMock.collection.calledWith(\"Users\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"otp\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Problems\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Blogs\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Editorials\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"SubmittedSolutions\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Solved\")).to.be.true;\nconsoleSpy.restore();",
                  "err": {},
                  "uuid": "2805dc2b-5505-43ed-b4de-722b5da61e91",
                  "parentUUID": "cfb8fe89-a0f7-4aeb-aada-606c6aa9a7e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2805dc2b-5505-43ed-b4de-722b5da61e91"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ae495d1-18a0-4e2d-a719-da59bd727fba",
              "title": "findOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"findOne\"",
                  "fullTitle": "database findOne \"before each\" hook in \"findOne\"",
                  "timedOut": false,
                  "duration": 49,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "4b84a5ef-8796-422d-8e27-20c65150de43",
                  "parentUUID": "4ae495d1-18a0-4e2d-a719-da59bd727fba",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"findOne\"",
                  "fullTitle": "database findOne \"after each\" hook in \"findOne\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "47287a53-8e52-4917-8c6e-003f151ee9ca",
                  "parentUUID": "4ae495d1-18a0-4e2d-a719-da59bd727fba",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return a document",
                  "fullTitle": "database findOne should return a document",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21 };\nawait testDatabase.users.insertOne(doc);\n      \n// Call the findOne function with the query object\nconst query = { name: 'user' };\nconst fields = { age:21, _id:0 };\nconst result = await testDatabase.findOne(testDatabase.users, query, fields);\n      \n// Assert that the result matches the expected document\nexpect (result).to.be.an('object');\n  expect (result).to.deep.equal({ age:21 });",
                  "err": {},
                  "uuid": "b8ddfdbc-ba93-4a06-88d6-06e508ff8166",
                  "parentUUID": "4ae495d1-18a0-4e2d-a719-da59bd727fba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8ddfdbc-ba93-4a06-88d6-06e508ff8166"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6182c6a9-3911-4101-8a6b-095683a8f91e",
              "title": "insertOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"insertOne\"",
                  "fullTitle": "database insertOne \"before each\" hook in \"insertOne\"",
                  "timedOut": false,
                  "duration": 35,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "84c8a350-81d6-4709-a773-f1c318ce4ba9",
                  "parentUUID": "6182c6a9-3911-4101-8a6b-095683a8f91e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"insertOne\"",
                  "fullTitle": "database insertOne \"after each\" hook in \"insertOne\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "82fcd734-a370-4dcb-bf6d-3396b00ef8c9",
                  "parentUUID": "6182c6a9-3911-4101-8a6b-095683a8f91e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should insert a document",
                  "fullTitle": "database insertOne should insert a document",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21 };\nlet insertData = await testDatabase.insertOne(testDatabase.users,doc);\n  // Assert that the result matches the expected document\nexpect (insertData.acknowledged).to.equal(true);\nexpect (insertData.insertedId).to.not.equal(null | undefined);",
                  "err": {},
                  "uuid": "37e51958-3bfb-4fac-ac51-3e7f2fcc09ef",
                  "parentUUID": "6182c6a9-3911-4101-8a6b-095683a8f91e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37e51958-3bfb-4fac-ac51-3e7f2fcc09ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27109c42-10fe-421c-a289-4d43b184d37a",
              "title": "updateOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateOne\"",
                  "fullTitle": "database updateOne \"before each\" hook in \"updateOne\"",
                  "timedOut": false,
                  "duration": 37,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "4adb75be-3722-4946-9713-d83b0f014e2a",
                  "parentUUID": "27109c42-10fe-421c-a289-4d43b184d37a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateOne\"",
                  "fullTitle": "database updateOne \"after each\" hook in \"updateOne\"",
                  "timedOut": false,
                  "duration": 14,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "f9016c37-b518-499e-baec-4307f91d26ee",
                  "parentUUID": "27109c42-10fe-421c-a289-4d43b184d37a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return a document",
                  "fullTitle": "database updateOne should return a document",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21,hobby : []};\nawait testDatabase.users.insertOne(doc);\n    \n// Call the findOne function with the query object\nlet query = { name: 'user' };\nlet result = await testDatabase.updateOne(testDatabase.users, query, {$set : {name: \"newUser\"}});\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.modifiedCount).to.equal(1);\nquery = { name: 'newUser' };\nresult = await testDatabase.updateOne(testDatabase.users, query, {$push : {hobby: \"newUser\"}});\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.modifiedCount).to.equal(1);",
                  "err": {},
                  "uuid": "340cb708-060a-46a3-b66d-72ada806513f",
                  "parentUUID": "27109c42-10fe-421c-a289-4d43b184d37a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "340cb708-060a-46a3-b66d-72ada806513f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f1b75274-1437-4e9f-b1e2-2166dfa4f8fe",
              "title": "deleteOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"deleteOne\"",
                  "fullTitle": "database deleteOne \"before each\" hook in \"deleteOne\"",
                  "timedOut": false,
                  "duration": 38,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "31d1228f-1847-4847-9344-8a2da423c348",
                  "parentUUID": "f1b75274-1437-4e9f-b1e2-2166dfa4f8fe",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"deleteOne\"",
                  "fullTitle": "database deleteOne \"after each\" hook in \"deleteOne\"",
                  "timedOut": false,
                  "duration": 10,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "cd8d4aa3-2d98-4e46-856e-8034160ffcb6",
                  "parentUUID": "f1b75274-1437-4e9f-b1e2-2166dfa4f8fe",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should delete a document",
                  "fullTitle": "database deleteOne should delete a document",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21};\nawait testDatabase.users.insertOne(doc);\n    \n// Call the findOne function with the query object\nlet query = { name: 'user' };\nlet result = await testDatabase.deleteOne(testDatabase.users, query);\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.deletedCount).to.equal(1);",
                  "err": {},
                  "uuid": "5361f4c4-7fe8-4ec8-b61c-a3f71e46acba",
                  "parentUUID": "f1b75274-1437-4e9f-b1e2-2166dfa4f8fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5361f4c4-7fe8-4ec8-b61c-a3f71e46acba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53191f8d-dcdc-4230-a5d1-e326b3f72dc8",
              "title": "find",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"find\"",
                  "fullTitle": "database find \"before all\" hook in \"find\"",
                  "timedOut": false,
                  "duration": 45,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a test collection and insert some documents\nmongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.client.connect();\ntestDatabase.users = testDatabase.client.db(testDatabase.database).collection('users');\nawait testDatabase.users.insertMany([\n  { name: 'user1', age: 21 },\n  { name: 'user2', age: 22 },\n  { name: 'user3', age: 23 },\n]);",
                  "err": {},
                  "uuid": "73efd40f-e7f3-465b-866e-71822617229b",
                  "parentUUID": "53191f8d-dcdc-4230-a5d1-e326b3f72dc8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"find\"",
                  "fullTitle": "database find \"after all\" hook in \"find\"",
                  "timedOut": false,
                  "duration": 15,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.client.close();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "daee8031-c627-4e3e-a14d-29d19ac1f7d9",
                  "parentUUID": "53191f8d-dcdc-4230-a5d1-e326b3f72dc8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should find all documents in the collection",
                  "fullTitle": "database find should find all documents in the collection",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users);\nexpect(docs).to.have.lengthOf(3);",
                  "err": {},
                  "uuid": "b09e032a-9cef-4097-b391-de815c61951c",
                  "parentUUID": "53191f8d-dcdc-4230-a5d1-e326b3f72dc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should find documents with a query object",
                  "fullTitle": "database find should find documents with a query object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, { name: 'user1' });\nexpect(docs).to.have.lengthOf(1);\nexpect(docs[0].name).to.equal('user1');",
                  "err": {},
                  "uuid": "55a5a5ba-0612-4584-ad5e-392542f6b231",
                  "parentUUID": "53191f8d-dcdc-4230-a5d1-e326b3f72dc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should sort documents with a sort object",
                  "fullTitle": "database find should sort documents with a sort object",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, {}, { age: -1 });\nexpect(docs).to.have.lengthOf(3);\nexpect(docs[0].name).to.equal('user3');",
                  "err": {},
                  "uuid": "17ad29e8-af36-4f73-9829-ea60ad180c75",
                  "parentUUID": "53191f8d-dcdc-4230-a5d1-e326b3f72dc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should project documents with a fields object",
                  "fullTitle": "database find should project documents with a fields object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, {}, {}, { name: 1 });\nexpect(docs).to.have.lengthOf(3);\nexpect(docs[0].name).to.exist;\nexpect(docs[0].age).to.not.exist;",
                  "err": {},
                  "uuid": "f1f1d0b2-f701-4e69-9d4b-771142d73970",
                  "parentUUID": "53191f8d-dcdc-4230-a5d1-e326b3f72dc8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b09e032a-9cef-4097-b391-de815c61951c",
                "55a5a5ba-0612-4584-ad5e-392542f6b231",
                "17ad29e8-af36-4f73-9829-ea60ad180c75",
                "f1f1d0b2-f701-4e69-9d4b-771142d73970"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "de65e24c-b414-4aa2-a6ee-8471eb266ab5",
              "title": "update",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"update\"",
                  "fullTitle": "database update \"before all\" hook in \"update\"",
                  "timedOut": false,
                  "duration": 43,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a test collection and insert some documents\nmongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.client.connect();\ntestDatabase.users = testDatabase.client.db(testDatabase.database).collection('users');\nawait testDatabase.users.insertMany([\n  { name: 'user1', age: 21,hobby:[] },\n  { name: 'user2', age: 22 ,hobby:[]},\n  { name: 'user3', age: 23 ,hobby:[]},\n]);",
                  "err": {},
                  "uuid": "136d6abd-671b-4346-80ba-7b731331356e",
                  "parentUUID": "de65e24c-b414-4aa2-a6ee-8471eb266ab5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"update\"",
                  "fullTitle": "database update \"after all\" hook in \"update\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.client.close();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "ea0340b5-af38-43ab-9720-ffecb453e199",
                  "parentUUID": "de65e24c-b414-4aa2-a6ee-8471eb266ab5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should set some values to all the documents with the required filter",
                  "fullTitle": "database update should set some values to all the documents with the required filter",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.update(testDatabase.users, {  }, { $set: { age:50 } });\nexpect(docs.modifiedCount).to.equal(3);",
                  "err": {},
                  "uuid": "6fd8a5be-a37d-47aa-a3b6-2c861c6868cc",
                  "parentUUID": "de65e24c-b414-4aa2-a6ee-8471eb266ab5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should push values in ana array to all the documents with the required filter",
                  "fullTitle": "database update should push values in ana array to all the documents with the required filter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.update(testDatabase.users, { age: {$gt:21} }, { $push: { hobby:\"newHobby\" } });\nexpect(docs.modifiedCount).to.equal(3);",
                  "err": {},
                  "uuid": "2614eb4b-24b7-43d5-a40a-04bd617193c7",
                  "parentUUID": "de65e24c-b414-4aa2-a6ee-8471eb266ab5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6fd8a5be-a37d-47aa-a3b6-2c861c6868cc",
                "2614eb4b-24b7-43d5-a40a-04bd617193c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "31ab5e39-ca4b-442e-9593-deb7b21a8048",
          "title": "Email",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
          "file": "/test/email.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "31a6c038-0f0a-4952-a168-087a57f3045a",
              "title": "sendMail",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
              "file": "/test/email.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendMail\"",
                  "fullTitle": "Email sendMail \"before each\" hook in \"sendMail\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "transporter = nodemailer.createTransport(nodemailerMock());\nemail = new Email();\nemail.transporter = transporter;\nemail.sender = \"test92.test@gmail.com\";",
                  "err": {},
                  "uuid": "cf937d56-7ca5-4bed-a6b8-53e941939ed9",
                  "parentUUID": "31a6c038-0f0a-4952-a168-087a57f3045a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"sendMail\"",
                  "fullTitle": "Email sendMail \"after each\" hook in \"sendMail\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "a035bf7c-87c7-41c1-a6ee-f49989ec0a27",
                  "parentUUID": "31a6c038-0f0a-4952-a168-087a57f3045a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send an email",
                  "fullTitle": "Email sendMail should send an email",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// to track the sendMail function of the email.transporter\nconst sendMailSpy = sinon.spy(email.transporter, \"sendMail\");\nconst receiver = \"nish95.sha@gmail.com\";\nconst subject = \"Test Email\";\nconst text = \"This is a test email.\";\n// call the sendMail function of the email class\nemail.sendMail(receiver, subject, text);\nexpect(sendMailSpy.calledOnce).to.be.true;\nexpect(sendMailSpy.firstCall.args[0]).to.deep.equal({\n  from: email.sender,\n  to: receiver,\n  subject: subject,\n  text: text,\n});",
                  "err": {},
                  "uuid": "67f02f27-1fb1-4a3a-bafb-08cc3278ca50",
                  "parentUUID": "31a6c038-0f0a-4952-a168-087a57f3045a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw the error if the email fails to send",
                  "fullTitle": "Email sendMail should throw the error if the email fails to send",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// mock the sendMail function of the email.transporter\nemail.transporter.sendMail = sinon\n  .stub()\n  .yields(\"Failed to send email.\");\n  // to call the callback function of the sendMail function with the error message\nconst receiver = \"recipient@example.com\";\nconst subject = \"Test email\";\nconst text = \"This is a test email.\";\nconst errorMessage = \"Failed to send email.\";\nexpect(() => {\n  email.sendMail(receiver, subject, text);\n}).to.throw(Error, errorMessage);",
                  "err": {},
                  "uuid": "c9137091-930e-40e7-8369-e6d993f6a940",
                  "parentUUID": "31a6c038-0f0a-4952-a168-087a57f3045a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67f02f27-1fb1-4a3a-bafb-08cc3278ca50",
                "c9137091-930e-40e7-8369-e6d993f6a940"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b7c1416-edbf-4541-b222-ee10a80cbbb0",
              "title": "sendOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
              "file": "/test/email.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendOTP\"",
                  "fullTitle": "Email sendOTP \"before each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "transporter = nodemailer.createTransport(nodemailerMock());\nemail = new Email();\nemail.transporter = transporter;\nemail.sender = \"test92.test@gmail.com\";\nemail.sendMail = sinon.stub().resolves();",
                  "err": {},
                  "uuid": "507b8c82-f6d7-4f5a-97a7-5f787f686749",
                  "parentUUID": "3b7c1416-edbf-4541-b222-ee10a80cbbb0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"sendOTP\"",
                  "fullTitle": "Email sendOTP \"after each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "911d1c3b-cd99-42ac-a6de-67680680cba0",
                  "parentUUID": "3b7c1416-edbf-4541-b222-ee10a80cbbb0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send an OTP",
                  "fullTitle": "Email sendOTP should send an OTP",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const receiver = \"nish95.sha@gmail.com\";\nconst otp = \"123456\";\nemail.sendOTP(receiver, otp);\nexpect(\n  email.sendMail.calledOnceWithExactly(\n    receiver,\n    \"OTP\",\n    `Your OTP is ${otp}`\n  )\n).to.be.true;",
                  "err": {},
                  "uuid": "6e3747ca-b68c-4c8f-a474-3728f10c6c45",
                  "parentUUID": "3b7c1416-edbf-4541-b222-ee10a80cbbb0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e3747ca-b68c-4c8f-a474-3728f10c6c45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d486a108-6a39-4598-9b57-99ac42281864",
          "title": "Problems",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
          "file": "/test/problem.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "168f4e7d-48d2-4707-bdb9-b7c83846c97a",
              "title": "handleCPP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"handleCPP\"",
                  "fullTitle": "Problems handleCPP \"before each\" hook in \"handleCPP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "res = {\n  send: sinon.stub(),\n};\nadminDB = {\n  findOne: sinon.stub(),\n  insertOne: sinon.stub(),\n  updateOne: sinon.stub(),\n};\ntestProblem = new Problem(adminDB, {});\nproblemId = \"644bc03d00e76ef0f3d3137f\";\ncode = `int sum(int a, int b) {return a+b;}`;\nlanguage = \"C++\";\nhandle = \"testHandle\";\ntimestamp = \"timastamp\";",
                  "err": {},
                  "uuid": "6fd47bb6-384c-414a-a24a-0fc67b7e2791",
                  "parentUUID": "168f4e7d-48d2-4707-bdb9-b7c83846c97a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return accept for correct solution",
                  "fullTitle": "Problems handleCPP should return accept for correct solution",
                  "timedOut": false,
                  "duration": 9002,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(0);\nsetTimeout(done, 9000);\nadminDB.findOne.onFirstCall().returns({\n  _id: new ObjectId(\"644bc03d00e76ef0f3d3137f\"),\n  author_handle: \"nishant_89\",\n  title: \"Add numbers in an array\",\n  content: \"Add numbers in an array\",\n  correct_code_CPP:\n    \"#include <bits/stdc++.h>\\n\" +\n    \"using namespace std;\\n\" +\n    \"int sum(int a,int b){\\n\" +\n    \"    return a+b;\\n\" +\n    \"}\\n\" +\n    \"int main(){\\n\" +\n    '    freopen(\"input.txt\", \"r\", stdin);                   \\n' +\n    '\\tfreopen(\"coutput.txt\", \"w\", stdout);\\n' +\n    \"\\n\" +\n    \"    int t;\\n\" +\n    \"cin>>t;\\n\" +\n    \"while(t--){\\n\" +\n    \"\\t int a,b;\\n\" +\n    \"    cin>>a>>b;\\n\" +\n    '    cout<<sum(a,b)<<\"\\\\n\";\\n' +\n    \"}\\n\" +\n    \"   \\n\" +\n    \"    return 0;\\n\" +\n    \"}\",\n  correct_code_JAVA:\n    \"import java.io.*;\\n\" +\n    \"\\n\" +\n    \"public class CorrectCode {\\n\" +\n    \"    public static void main(String[] args) {\\n\" +\n    \"        try {\\n\" +\n    \"            // Open input and output files\\n\" +\n    '            BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\\n' +\n    '            BufferedWriter writer = new BufferedWriter(new FileWriter(\"coutput.txt\"));\\n' +\n    \"\\n\" +\n    \"\\t\\t// Read first number from input file\\n\" +\n    \"            String line = reader.readLine();\\n\" +\n    \"            int t = Integer.parseInt(line);\\n\" +\n    \"\\n\" +\n    \"\\t\\twhile(t>0){\\n\" +\n    \"\\t\\t\\tString input = reader.readLine();\\n\" +\n    '\\t\\t\\tString[] inputArray = input.split(\" \"); // splits the input by space\\n' +\n    \"        \\t\\tint num1 = Integer.parseInt(inputArray[0]); // converts the first number to an integer\\n\" +\n    \"        \\t\\tint num2 = Integer.parseInt(inputArray[1]); \\n\" +\n    \"            \\n\" +\n    '            \\twriter.write(num1+num2+\"\\\\n\");\\n' +\n    \"            \\n\" +\n    \"            \\t// Close input and output files\\n\" +\n    \"\\t\\t\\tt--;\\n\" +\n    \"\\t\\t}\\n\" +\n    \"\\t\\treader.close();\\n\" +\n    \"            writer.close();\\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"        } catch (IOException e) {\\n\" +\n    \"            e.printStackTrace();\\n\" +\n    \"        }\\n\" +\n    \"    }\\n\" +\n    \"}\",\n  time_limit: 1,\n  input_format: \"input\",\n  output_format: \"output\",\n  example_input: \"sample_input\",\n  example_output: \"sample_output\",\n  function_def_CPP: \"int sum(int a,int b){\\n}\",\n  input_template_CPP:\n    \"#include <bits/stdc++.h>\\n\" +\n    \"using namespace std;\\n\" +\n    '#include \"funcDef.h\"\\n' +\n    \"int main(){\\n\" +\n    '    freopen(\"input.txt\", \"r\", stdin);                   \\n' +\n    '\\tfreopen(\"output.txt\", \"w\", stdout);\\n' +\n    \"\\t\\n\" +\n    \"    int t;\\n\" +\n    \"    cin>>t;\\n\" +\n    \"    while(t--){\\n\" +\n    \"\\tint a,b;\\n\" +\n    \"    cin>>a>>b;\\n\" +\n    '    cout<<sum(a,b)<<\"\\\\n\";\\n' +\n    \"    }\\n\" +\n    \"\\n\" +\n    \"    \\n\" +\n    \"    return 0;\\n\" +\n    \"}\",\n  function_def_JAVA:\n    \"public class Solution {\\n\" +\n    \"    public static int add(int a, int b) {\\n\" +\n    \"        // Write your code here.\\n\" +\n    \"    }\\n\" +\n    \"}\",\n  input_template_JAVA:\n    \"import java.io.*;\\n\" +\n    \"\\n\" +\n    \"public class Func {\\n\" +\n    \"    public static void main(String[] args) {\\n\" +\n    \"        try {\\n\" +\n    \"            // Open input and output files\\n\" +\n    '            BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\\n' +\n    '            BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"));\\n' +\n    \"\\n\" +\n    \"\\t\\t// Read first number from input file\\n\" +\n    \"            String line = reader.readLine();\\n\" +\n    \"            int t = Integer.parseInt(line);\\n\" +\n    \"\\n\" +\n    \"\\t\\twhile(t>0){\\n\" +\n    \"\\t\\t\\tString input = reader.readLine();\\n\" +\n    '\\t\\t\\tString[] inputArray = input.split(\" \"); // splits the input by space\\n' +\n    \"        \\t\\tint num1 = Integer.parseInt(inputArray[0]); // converts the first number to an integer\\n\" +\n    \"        \\t\\tint num2 = Integer.parseInt(inputArray[1]); \\n\" +\n    \"            \\n\" +\n    '            \\twriter.write(Solution.add(num1,num2)+\"\\\\n\");\\n' +\n    \"\\t\\t\\tt--;\\n\" +\n    \"            \\n\" +\n    \"\\t\\t}\\n\" +\n    \"\\t\\t// Close input and output files\\n\" +\n    \"            \\treader.close();\\n\" +\n    \"            \\twriter.close();\\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"        } catch (IOException e) {\\n\" +\n    \"            e.printStackTrace();\\n\" +\n    \"        }\\n\" +\n    \"    }\\n\" +\n    \"}\",\n  testcases: \"5\\n1 3\\n4 6\\n2 0\\n1 -1\\n2 3\",\n  timestamp: \"2023-04-28T11:21:23.840Z\",\n  tags: [\"a\", \"b\"],\n  level: \"medium\",\n});\nadminDB.findOne.onSecondCall().returns({ problems: [] });\nadminDB.insertOne.returns({});\nadminDB.updateOne.returns({});\ntestProblem.handleCPP(problemId, handle, code, timestamp, language, res);\nsetTimeout(() => {\n  expect(adminDB.findOne.callCount).to.equal(2);\n}, 9000);",
                  "err": {},
                  "uuid": "5d4352e5-1b31-4ebf-a27f-77f12be405c3",
                  "parentUUID": "168f4e7d-48d2-4707-bdb9-b7c83846c97a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d4352e5-1b31-4ebf-a27f-77f12be405c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9002,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e761db15-a416-4d44-b9eb-b934e4de87c0",
              "title": "handleJAVA",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"handleJAVA\"",
                  "fullTitle": "Problems handleJAVA \"before each\" hook in \"handleJAVA\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "res = {\n  send: sinon.stub(),\n};\nadminDB = {\n  findOne: sinon.stub(),\n  insertOne: sinon.stub(),\n  updateOne: sinon.stub(),\n};\ntestProblem = new Problem(adminDB, {});\nproblemId = \"644bc03d00e76ef0f3d3137f\";\ncode = `public class Solution {public static int add(int a, int b) {return a+b;}}`;\nlanguage = \"Java\";\nhandle = \"testHandle\";\ntimestamp = \"timastamp\";",
                  "err": {},
                  "uuid": "1fca8e1d-b8c3-42a1-989e-7ae44545e84f",
                  "parentUUID": "e761db15-a416-4d44-b9eb-b934e4de87c0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return accept for correct solution",
                  "fullTitle": "Problems handleJAVA should return accept for correct solution",
                  "timedOut": false,
                  "duration": 9002,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(0);\nsetTimeout(done, 9000);\nadminDB.findOne.onFirstCall().returns({\n  _id: new ObjectId(\"644bc03d00e76ef0f3d3137f\"),\n  author_handle: \"nishant_89\",\n  title: \"Add numbers in an array\",\n  content: \"Add numbers in an array\",\n  correct_code_CPP:\n    \"#include <bits/stdc++.h>\\n\" +\n    \"using namespace std;\\n\" +\n    \"int sum(int a,int b){\\n\" +\n    \"    return a+b;\\n\" +\n    \"}\\n\" +\n    \"int main(){\\n\" +\n    '    freopen(\"input.txt\", \"r\", stdin);                   \\n' +\n    '\\tfreopen(\"coutput.txt\", \"w\", stdout);\\n' +\n    \"\\n\" +\n    \"    int t;\\n\" +\n    \"cin>>t;\\n\" +\n    \"while(t--){\\n\" +\n    \"\\t int a,b;\\n\" +\n    \"    cin>>a>>b;\\n\" +\n    '    cout<<sum(a,b)<<\"\\\\n\";\\n' +\n    \"}\\n\" +\n    \"   \\n\" +\n    \"    return 0;\\n\" +\n    \"}\",\n  correct_code_JAVA:\n    \"import java.io.*;\\n\" +\n    \"\\n\" +\n    \"public class CorrectCode {\\n\" +\n    \"    public static void main(String[] args) {\\n\" +\n    \"        try {\\n\" +\n    \"            // Open input and output files\\n\" +\n    '            BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\\n' +\n    '            BufferedWriter writer = new BufferedWriter(new FileWriter(\"coutput.txt\"));\\n' +\n    \"\\n\" +\n    \"\\t\\t// Read first number from input file\\n\" +\n    \"            String line = reader.readLine();\\n\" +\n    \"            int t = Integer.parseInt(line);\\n\" +\n    \"\\n\" +\n    \"\\t\\twhile(t>0){\\n\" +\n    \"\\t\\t\\tString input = reader.readLine();\\n\" +\n    '\\t\\t\\tString[] inputArray = input.split(\" \"); // splits the input by space\\n' +\n    \"        \\t\\tint num1 = Integer.parseInt(inputArray[0]); // converts the first number to an integer\\n\" +\n    \"        \\t\\tint num2 = Integer.parseInt(inputArray[1]); \\n\" +\n    \"            \\n\" +\n    '            \\twriter.write(num1+num2+\"\\\\n\");\\n' +\n    \"            \\n\" +\n    \"            \\t// Close input and output files\\n\" +\n    \"\\t\\t\\tt--;\\n\" +\n    \"\\t\\t}\\n\" +\n    \"\\t\\treader.close();\\n\" +\n    \"            writer.close();\\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"        } catch (IOException e) {\\n\" +\n    \"            e.printStackTrace();\\n\" +\n    \"        }\\n\" +\n    \"    }\\n\" +\n    \"}\",\n  time_limit: 1,\n  input_format: \"input\",\n  output_format: \"output\",\n  example_input: \"sample_input\",\n  example_output: \"sample_output\",\n  function_def_CPP: \"int sum(int a,int b){\\n}\",\n  input_template_CPP:\n    \"#include <bits/stdc++.h>\\n\" +\n    \"using namespace std;\\n\" +\n    '#include \"funcDef.h\"\\n' +\n    \"int main(){\\n\" +\n    '    freopen(\"input.txt\", \"r\", stdin);                   \\n' +\n    '\\tfreopen(\"output.txt\", \"w\", stdout);\\n' +\n    \"\\t\\n\" +\n    \"    int t;\\n\" +\n    \"    cin>>t;\\n\" +\n    \"    while(t--){\\n\" +\n    \"\\tint a,b;\\n\" +\n    \"    cin>>a>>b;\\n\" +\n    '    cout<<sum(a,b)<<\"\\\\n\";\\n' +\n    \"    }\\n\" +\n    \"\\n\" +\n    \"    \\n\" +\n    \"    return 0;\\n\" +\n    \"}\",\n  function_def_JAVA:\n    \"public class Solution {\\n\" +\n    \"    public static int add(int a, int b) {\\n\" +\n    \"        // Write your code here.\\n\" +\n    \"    }\\n\" +\n    \"}\",\n  input_template_JAVA:\n    \"import java.io.*;\\n\" +\n    \"\\n\" +\n    \"public class Func {\\n\" +\n    \"    public static void main(String[] args) {\\n\" +\n    \"        try {\\n\" +\n    \"            // Open input and output files\\n\" +\n    '            BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\\n' +\n    '            BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"));\\n' +\n    \"\\n\" +\n    \"\\t\\t// Read first number from input file\\n\" +\n    \"            String line = reader.readLine();\\n\" +\n    \"            int t = Integer.parseInt(line);\\n\" +\n    \"\\n\" +\n    \"\\t\\twhile(t>0){\\n\" +\n    \"\\t\\t\\tString input = reader.readLine();\\n\" +\n    '\\t\\t\\tString[] inputArray = input.split(\" \"); // splits the input by space\\n' +\n    \"        \\t\\tint num1 = Integer.parseInt(inputArray[0]); // converts the first number to an integer\\n\" +\n    \"        \\t\\tint num2 = Integer.parseInt(inputArray[1]); \\n\" +\n    \"            \\n\" +\n    '            \\twriter.write(Solution.add(num1,num2)+\"\\\\n\");\\n' +\n    \"\\t\\t\\tt--;\\n\" +\n    \"            \\n\" +\n    \"\\t\\t}\\n\" +\n    \"\\t\\t// Close input and output files\\n\" +\n    \"            \\treader.close();\\n\" +\n    \"            \\twriter.close();\\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"        } catch (IOException e) {\\n\" +\n    \"            e.printStackTrace();\\n\" +\n    \"        }\\n\" +\n    \"    }\\n\" +\n    \"}\",\n  testcases: \"5\\n1 3\\n4 6\\n2 0\\n1 -1\\n2 3\",\n  timestamp: \"2023-04-28T11:21:23.840Z\",\n  tags: [\"a\", \"b\"],\n  level: \"medium\",\n});\nadminDB.findOne.onSecondCall().returns({ problems: [] });\nadminDB.insertOne.returns({});\nadminDB.updateOne.returns({});\ntestProblem.handleJAVA(problemId, handle, code, timestamp, language, res);\nsetTimeout(() => {\n  expect(adminDB.findOne.callCount).to.equal(2);\n}, 9000);",
                  "err": {},
                  "uuid": "63fb38e8-ddae-4255-9903-c533b4dde3e2",
                  "parentUUID": "e761db15-a416-4d44-b9eb-b934e4de87c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63fb38e8-ddae-4255-9903-c533b4dde3e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9002,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2f2cae5-780b-4e96-aec2-6b2e2832f2fd",
              "title": "postProblem",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"postProblem\"",
                  "fullTitle": "Problems postProblem \"before each\" hook in \"postProblem\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create stubs for adminJWT and adminDB\nadminJWT = {\n  verifyToken: sinon.stub().returns({ handle: 'admin', type: '2' }),\n};\nadminDB = {\n  insertOne: sinon.stub().returns(true),\n  problem: 'problemCollection',\n};\n  \n// Create a fake response object with a send function\nres = {\n  send: sinon.stub(),\n};\npostProblem = new Problem(adminDB,adminJWT).postProblem;",
                  "err": {},
                  "uuid": "8a94a9ce-b3a9-41bd-b2b5-a40374289c4d",
                  "parentUUID": "b2f2cae5-780b-4e96-aec2-6b2e2832f2fd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should post a problem successfully",
                  "fullTitle": "Problems postProblem should post a problem successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock the request object with necessary properties\nconst req = {\n  body: {\n    userToken: 'fakeToken',\n    // other properties required by the function\n  },\n};\n  \n  \n// Call the function\nawait postProblem(req, res, adminJWT, adminDB);\n  \n// Verify the expected behavior\n  \n// Verify that adminJWT.verifyToken is called with the correct arguments\nexpect(adminJWT.verifyToken.calledOnce).to.be.true;\nexpect(adminJWT.verifyToken.calledWith('fakeToken')).to.be.true;\n  \n// Verify that adminDB.insertOne is called with the correct arguments\nexpect(adminDB.insertOne.calledOnce).to.be.true;\nexpect(adminDB.insertOne.calledWith(adminDB.problem, sinon.match.any)).to.be.true;\n  \n// Verify that res.send is called with the correct success message\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.calledWith({ success: true, message: 'Problem posted successfully.' })).to.be.true;",
                  "err": {},
                  "uuid": "7f946981-f7e7-408a-804d-9ea32e34b864",
                  "parentUUID": "b2f2cae5-780b-4e96-aec2-6b2e2832f2fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error message if the user is not authorized",
                  "fullTitle": "Problems postProblem should return an error message if the user is not authorized",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock the request object with necessary properties\nconst req = {\n  body: {\n    userToken: 'fakeToken',\n    // other properties required by the function\n  },\n};\n  \n// Modify the stub for adminJWT to return a different user type\nadminJWT.verifyToken.returns({ handle: 'user', type: '1' });\n  \n// Import the function to be tested here and pass the stubs and mocks\n  \n// Call the function\nawait postProblem(req, res, adminJWT, adminDB);\n  \n// Verify the expected behavior\n  \n// Verify that adminJWT.verifyToken is called with the correct arguments\nexpect(adminJWT.verifyToken.calledOnce).to.be.true;\nexpect(adminJWT.verifyToken.calledWith('fakeToken')).to.be.true;\n  \n// Verify that adminDB.insertOne is not called\nexpect(adminDB.insertOne.notCalled).to.be.true;\n  \n// Verify that res.send is called with the correct error message\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.calledWith({\n  success: false,\n  message: 'You are not authorized to post problems.',\n})).to.be.true;",
                  "err": {},
                  "uuid": "2f671673-0c59-4152-a1fe-c4373f7e69bb",
                  "parentUUID": "b2f2cae5-780b-4e96-aec2-6b2e2832f2fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle token expiration error",
                  "fullTitle": "Problems postProblem should handle token expiration error",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock the request object with necessary properties\nconst req = {\n  body: {\n    userToken: 'expiredToken',\n    // other properties required by the function\n  },\n};\n    // Modify the stub for adminJWT to throw a TokenExpiredError\n    adminJWT.verifyToken.throws(new TokenExpiredError('Token expired'));\n\n    // Import the function to be tested here and pass the stubs and mocks\n\n    // Call the function\n    await postProblem(req, res, adminJWT, adminDB);\n\n    // Verify the expected behavior\n\n    // Verify that adminJWT.verifyToken is called with the correct arguments\n    expect(adminJWT.verifyToken.calledOnce).to.be.true;\n    expect(adminJWT.verifyToken.calledWith('expiredToken')).to.be.true;\n\n    // Verify that adminDB.insertOne is not called\n    expect(adminDB.insertOne.notCalled).to.be.true;\n\n    // Verify that res.send is called with the correct error message\n    expect(res.send.calledOnce).to.be.true;\n    expect(res.send.calledWith({ success: false, message: 'Token has expired.' })).to.be.true;",
                  "err": {},
                  "uuid": "57f9107c-1b40-4c93-8b20-aec7f6653511",
                  "parentUUID": "b2f2cae5-780b-4e96-aec2-6b2e2832f2fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle internal server error during problem posting",
                  "fullTitle": "Problems postProblem should handle internal server error during problem posting",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock the request object with necessary properties\nconst req = {\n  body: {\n    userToken: 'fakeToken',\n    // other properties required by the function\n  },\n};\n// Modify the stub for adminDB to return false, indicating an internal server error\nadminDB.insertOne.returns(false);\n// Import the function to be tested here and pass the stubs and mocks\n// Call the function\nawait postProblem(req, res, adminJWT, adminDB);\n// Verify the expected behavior\n// Verify that adminJWT.verifyToken is called with the correct arguments\nexpect(adminJWT.verifyToken.calledOnce).to.be.true;\nexpect(adminJWT.verifyToken.calledWith('fakeToken')).to.be.true;\n// Verify that adminDB.insertOne is called with the correct arguments\nexpect(adminDB.insertOne.calledOnce).to.be.true;\nexpect(adminDB.insertOne.calledWith(adminDB.problem, sinon.match.any)).to.be.true;\n// Verify that res.send is called with the correct error message\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.calledWith({\n  success: false,\n  message: 'Problem can\\'t be posted due to internal reasons',\n})).to.be.true;",
                  "err": {},
                  "uuid": "cb064b92-b4e8-4c3c-a1bf-c73743ac0e59",
                  "parentUUID": "b2f2cae5-780b-4e96-aec2-6b2e2832f2fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f946981-f7e7-408a-804d-9ea32e34b864",
                "2f671673-0c59-4152-a1fe-c4373f7e69bb",
                "57f9107c-1b40-4c93-8b20-aec7f6653511",
                "cb064b92-b4e8-4c3c-a1bf-c73743ac0e59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b852d020-21ee-4971-8239-cf30a8e1398d",
              "title": "fetchSolvedProblems",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"fetchSolvedProblems\"",
                  "fullTitle": "Problems fetchSolvedProblems \"before each\" hook in \"fetchSolvedProblems\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminJWT = {\n  verifyToken: sinon.stub().returns({ handle })\n};\n\nreq = { body: { userToken } };\nres = {\n  send: sinon.stub(),\n};\nadminDB = {\n  findOne: sinon.stub().returns({ problems: solvedProblems }),\n  solved: 'solved_collection'\n};\nfetchSolvedProblems = new Problem(adminDB,adminJWT).fetchSolvedProblems;",
                  "err": {},
                  "uuid": "6ec6de6f-f240-4b25-966a-01ce05955171",
                  "parentUUID": "b852d020-21ee-4971-8239-cf30a8e1398d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fetch solved problems of user from solved collection",
                  "fullTitle": "Problems fetchSolvedProblems should fetch solved problems of user from solved collection",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await fetchSolvedProblems(req, res);\n    expect(adminJWT.verifyToken.calledOnceWith(userToken)).to.be.true;\n    expect(adminDB.findOne.calledOnceWith(adminDB.solved, { handle }, { problems: 1, _id: 0 })).to.be.true;\n    expect(res.send.calledOnceWith({\n      success: true,\n      problems: solvedProblems,\n      message: 'Solved problems fetched successfully'\n    })).to.be.true;",
                  "err": {},
                  "uuid": "8309f63d-1f67-44ca-899e-dcb40b990e23",
                  "parentUUID": "b852d020-21ee-4971-8239-cf30a8e1398d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error message for token expired error",
                  "fullTitle": "Problems fetchSolvedProblems should send error message for token expired error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminJWT.verifyToken= sinon.stub().throws(new TokenExpiredError());\nawait fetchSolvedProblems(req, res);\nexpect(adminJWT.verifyToken.calledOnceWith(userToken)).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'Token has expired.'\n})).to.be.true;",
                  "err": {},
                  "uuid": "daaa0140-1205-45af-9968-2bfa05b6124f",
                  "parentUUID": "b852d020-21ee-4971-8239-cf30a8e1398d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error message for other token errors",
                  "fullTitle": "Problems fetchSolvedProblems should send error message for other token errors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminJWT.verifyToken= sinon.stub().throws(new JsonWebTokenError());\nawait fetchSolvedProblems(req, res);\nexpect(adminJWT.verifyToken.calledOnceWith(userToken)).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'User has logged out.Kindly login again'\n})).to.be.true;",
                  "err": {},
                  "uuid": "394f26ad-bb91-41cb-9cac-74cfc339944a",
                  "parentUUID": "b852d020-21ee-4971-8239-cf30a8e1398d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error message for other errors",
                  "fullTitle": "Problems fetchSolvedProblems should send error message for other errors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne = sinon.stub().throws(new Error('Some error occurred'));    \n  await fetchSolvedProblems(req, res);\n  expect(adminJWT.verifyToken.calledOnceWith(userToken)).to.be.true;\n  expect(adminDB.findOne.calledOnceWith(adminDB.solved, { handle: 'testUser' }, { problems: 1, _id: 0 })).to.be.true;\n  expect(res.send.calledOnceWith({\n  success: false,\n  message: 'Some error occurred'\n  })).to.be.true;",
                  "err": {},
                  "uuid": "0ea13fef-e422-48cd-872d-cfac719c061f",
                  "parentUUID": "b852d020-21ee-4971-8239-cf30a8e1398d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8309f63d-1f67-44ca-899e-dcb40b990e23",
                "daaa0140-1205-45af-9968-2bfa05b6124f",
                "394f26ad-bb91-41cb-9cac-74cfc339944a",
                "0ea13fef-e422-48cd-872d-cfac719c061f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c6262372-65e3-49e8-b4e3-09aa54d5d6aa",
              "title": "fetchAllSubmissions",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"fetchAllSubmissions\"",
                  "fullTitle": "Problems fetchAllSubmissions \"before each\" hook in \"fetchAllSubmissions\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "res = {\n  send: sinon.stub(),\n};\nadminDB = {\n  find: sinon.stub(),\n  problem: \"problemCollection\",\n  solution: \"solutionCollection\",\n}\nadminJWT = {\n  verifyToken: sinon.stub(),\n};\n       fetchAllSubmissions = new Problem(adminDB,adminJWT).fetchAllSubmissions;",
                  "err": {},
                  "uuid": "9d1bc429-abd5-4fa7-bccb-0cb199d538a4",
                  "parentUUID": "c6262372-65e3-49e8-b4e3-09aa54d5d6aa",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"fetchAllSubmissions\"",
                  "fullTitle": "Problems fetchAllSubmissions \"after each\" hook in \"fetchAllSubmissions\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "e47b001c-0582-46aa-91be-e491451ec7b7",
                  "parentUUID": "c6262372-65e3-49e8-b4e3-09aa54d5d6aa",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return submissions for a valid token",
                  "fullTitle": "Problems fetchAllSubmissions should return submissions for a valid token",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminJWT.verifyToken.returns({\n    handle: handle,\n  });\n  const data = [\n    {\n      _id: new ObjectId(),\n      problemId: new ObjectId(),\n      handle: \"testHandle\",\n      code: \"testCode\",\n      timestamp: \"testTimestamp\",\n      language: \"testLanguage\",\n    },\n  ];\n  adminDB.find.withArgs(adminDB.solution, { handle: handle }).returns(data);\n  const problemData = [\n    {\n      _id: data[0].problemId,\n      title: \"testTitle\",\n    },\n  ];\n  adminDB.find.withArgs(adminDB.problem, { _id: { $in: [data[0].problemId] } }, {}, { title: 1 })\n    .returns(problemData);\n    \n  await fetchAllSubmissions(req, res);\n    \n  expect(res.send.calledOnce).to.be.true;\n  expect(res.send.firstCall.args[0]).to.deep.equal({\n    success: true,\n    submissions: [\n      {\n        ...data[0],\n        title: problemData[0].title,\n      },\n    ],\n    message: \"Submissions fetched successfully\",\n  });",
                  "err": {},
                  "uuid": "309b1ba9-4721-4abf-a6a2-d44a0684d4c0",
                  "parentUUID": "c6262372-65e3-49e8-b4e3-09aa54d5d6aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error message for an invalid token",
                  "fullTitle": "Problems fetchAllSubmissions should return an error message for an invalid token",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new JsonWebTokenError(\"invalid token\");\nadminJWT.verifyToken = sinon.stub().throws(error);\n    \nawait fetchAllSubmissions(req, res);\n    \nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"User has logged out.Kindly login again\",\n});",
                  "err": {},
                  "uuid": "f763b6c0-d995-4685-9e48-53a930efe7e3",
                  "parentUUID": "c6262372-65e3-49e8-b4e3-09aa54d5d6aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error message for an expired token",
                  "fullTitle": "Problems fetchAllSubmissions should return an error message for an expired token",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new TokenExpiredError(\"expired token\");\nadminJWT.verifyToken = sinon.stub().throws(error);\n    \nawait fetchAllSubmissions(req, res);\n    \nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Token has expired.\",\n});",
                  "err": {},
                  "uuid": "d8c26f8c-4c99-4cce-a1f4-13c052fd304c",
                  "parentUUID": "c6262372-65e3-49e8-b4e3-09aa54d5d6aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error message for any other errors",
                  "fullTitle": "Problems fetchAllSubmissions should return an error message for any other errors",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(\"unknown error\");\nadminDB.find = sinon.stub().throws(error);\nadminJWT.verifyToken.returns({\n  handle: handle,\n});\nawait fetchAllSubmissions(req, res);\n    \nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: error.message,\n});",
                  "err": {},
                  "uuid": "dabd97c4-ed90-4ca6-8ae3-d055dd3f7318",
                  "parentUUID": "c6262372-65e3-49e8-b4e3-09aa54d5d6aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "309b1ba9-4721-4abf-a6a2-d44a0684d4c0",
                "f763b6c0-d995-4685-9e48-53a930efe7e3",
                "d8c26f8c-4c99-4cce-a1f4-13c052fd304c",
                "dabd97c4-ed90-4ca6-8ae3-d055dd3f7318"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e71bbdf4-a717-4ae9-948c-6e91b1b70e35",
              "title": "fetchProblemDetails",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"fetchProblemDetails\"",
                  "fullTitle": "Problems fetchProblemDetails \"before each\" hook in \"fetchProblemDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: sinon.stub(),\n  problem: \"problemCollection\",\n};\n    \nreq = {\n  body: {\n    problemId: \"someProblemI\",\n  },\n};\n    \nres = {\n  send: sinon.stub(),\n};\nfetchProblemDetails = new Problem(adminDB,{}).fetchProblemDetails;",
                  "err": {},
                  "uuid": "f5f5191e-28ca-474f-8b55-e2b83edc0bb7",
                  "parentUUID": "e71bbdf4-a717-4ae9-948c-6e91b1b70e35",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return problem details when valid problemId is provided",
                  "fullTitle": "Problems fetchProblemDetails should return problem details when valid problemId is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedData = { problem: \"data\" };\nadminDB.findOne.resolves(expectedData);\n    \nawait fetchProblemDetails(req, res, adminDB);\n    \nsinon.assert.calledWith(\n  adminDB.findOne,\n  \"problemCollection\",\n  { _id: new ObjectId(\"someProblemI\") },\n  { _id: 0, correct_code_CPP: 0, correct_code_JAVA: 0, testcases: 0 }\n);\n    \nsinon.assert.calledWith(res.send, {\n  success: true,\n  problem: expectedData,\n  message: \"Problem details fetched successfully\",\n});",
                  "err": {},
                  "uuid": "420bab53-6d50-4f06-8886-0a7ef3518998",
                  "parentUUID": "e71bbdf4-a717-4ae9-948c-6e91b1b70e35",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error message when an error occurs while fetching the problem details",
                  "fullTitle": "Problems fetchProblemDetails should return an error message when an error occurs while fetching the problem details",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedError = new Error(\"Some error occurred\");\nadminDB.findOne.rejects(expectedError);\n    \nawait fetchProblemDetails(req, res, adminDB);\n    \nsinon.assert.calledWith(res.send, {\n  success: false,\n  message: expectedError.message,\n});",
                  "err": {},
                  "uuid": "b5544d96-7f31-4902-9b8b-1c0d8d8f538d",
                  "parentUUID": "e71bbdf4-a717-4ae9-948c-6e91b1b70e35",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "420bab53-6d50-4f06-8886-0a7ef3518998",
                "b5544d96-7f31-4902-9b8b-1c0d8d8f538d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "045f08a8-a0da-4add-b837-55343d4a7b86",
              "title": "fetchAllProblems",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"fetchAllProblems\"",
                  "fullTitle": "Problems fetchAllProblems \"before each\" hook in \"fetchAllProblems\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  find: sinon.stub(),\n};\nreq = {};\nres = {\n  send: sinon.spy(),\n};\nfetchAllProblems = new Problem(adminDB,{}).fetchAllProblems;",
                  "err": {},
                  "uuid": "8f720008-a30c-4268-9cfb-c38fd90c360c",
                  "parentUUID": "045f08a8-a0da-4add-b837-55343d4a7b86",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fetch all problems from the problem collection",
                  "fullTitle": "Problems fetchAllProblems should fetch all problems from the problem collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = [{ title: 'Problem 1', timestamp: 1234567890 }];\nadminDB.find.returns(data)\n    \nawait fetchAllProblems(req, res);\n    \nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: true,\n  problems: data,\n  message: 'Problems fetched successfully',\n});",
                  "err": {},
                  "uuid": "4b9e04b7-1546-4966-a322-aaab16f31e95",
                  "parentUUID": "045f08a8-a0da-4add-b837-55343d4a7b86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors",
                  "fullTitle": "Problems fetchAllProblems should handle errors",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = 'Error fetching problems';\nadminDB.find = sinon.stub().throws(new Error(errorMessage));\n    \nawait fetchAllProblems(req, res);\n    \nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: errorMessage,\n});",
                  "err": {},
                  "uuid": "cbc752a4-4a78-406b-b6d5-fab77ab00ee7",
                  "parentUUID": "045f08a8-a0da-4add-b837-55343d4a7b86",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b9e04b7-1546-4966-a322-aaab16f31e95",
                "cbc752a4-4a78-406b-b6d5-fab77ab00ee7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "057b58c3-b5de-446a-8d53-ab6a95d8d524",
          "title": "User",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
          "file": "/test/user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ff651c6a-d03a-4181-8a79-73823272acf9",
              "title": "userLogin",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"userLogin\"",
                  "fullTitle": "User userLogin \"before each\" hook in \"userLogin\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  users: \"users\",\n  findOne: stub(),\n};\nadminJWT = {\n  createToken: stub(),\n};\nreq = {\n  body: {\n    email: email,\n    password: password,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, adminJWT);",
                  "err": {},
                  "uuid": "a02e9249-224b-471c-972e-61f55aab6f4e",
                  "parentUUID": "ff651c6a-d03a-4181-8a79-73823272acf9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"userLogin\"",
                  "fullTitle": "User userLogin \"after each\" hook in \"userLogin\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "48f1ba29-1ff8-47ea-b7b6-21b59eb5151c",
                  "parentUUID": "ff651c6a-d03a-4181-8a79-73823272acf9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send success response if login is successful",
                  "fullTitle": "User userLogin should send success response if login is successful",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = bcrypt.hashSync(req.body.password, 10);\nadminDB.findOne.resolves({\n  email: req.body.email,\n  password: hashedPassword,\n  type: type,\n  handle: handle,\n});\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nadminJWT.createToken.returns(\"mockToken\");\nawait user.userLogin(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.calledOnce).to.be.true;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.true;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: true,\n  message: \"Login Successful\",\n  type: type,\n  userToken: \"mockToken\",\n});",
                  "err": {},
                  "uuid": "b682837b-c18d-4e6c-b8d7-1ce4ac1ba801",
                  "parentUUID": "ff651c6a-d03a-4181-8a79-73823272acf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if password does not match",
                  "fullTitle": "User userLogin should send error response if password does not match",
                  "timedOut": false,
                  "duration": 115,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = bcrypt.hashSync(\"\", 10);\nadminDB.findOne.resolves({\n  email: req.body.email,\n  password: hashedPassword,\n  type: type,\n  handle: handle,\n});\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nawait user.userLogin(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.calledOnce).to.be.true;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.false;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Invalid Email or Password\",\n});",
                  "err": {},
                  "uuid": "fbe2e412-7728-409f-8ac5-cc0a60b44117",
                  "parentUUID": "ff651c6a-d03a-4181-8a79-73823272acf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User userLogin should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.resolves(null);\nawait user.userLogin(req, res);\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.called).to.be.false;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.false;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Invalid Email or Password\",\n});",
                  "err": {},
                  "uuid": "1d78df11-21f5-40da-926b-27076c0d9e18",
                  "parentUUID": "ff651c6a-d03a-4181-8a79-73823272acf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if an error occurs",
                  "fullTitle": "User userLogin should send error response if an error occurs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.rejects(new Error(\"Database error\"));\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nawait user.userLogin(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.called).to.be.false;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.false;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Database error\",\n});",
                  "err": {},
                  "uuid": "3d0d6dbb-6cc2-4785-a4a2-8311f4735f6b",
                  "parentUUID": "ff651c6a-d03a-4181-8a79-73823272acf9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b682837b-c18d-4e6c-b8d7-1ce4ac1ba801",
                "fbe2e412-7728-409f-8ac5-cc0a60b44117",
                "1d78df11-21f5-40da-926b-27076c0d9e18",
                "3d0d6dbb-6cc2-4785-a4a2-8311f4735f6b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 236,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "662b9c25-df44-481e-8ec9-c21372fea38c",
              "title": "getUserDetails",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getUserDetails\"",
                  "fullTitle": "User getUserDetails \"before each\" hook in \"getUserDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  users: \"users\",\n  findOne: stub(),\n};\nadminJWT = {\n  verifyToken: stub(),\n};\nreq = {\n  body: {\n    userToken: \"mockToken\",\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, adminJWT);",
                  "err": {},
                  "uuid": "0acdcbae-108d-4789-bb40-ab87c7105a15",
                  "parentUUID": "662b9c25-df44-481e-8ec9-c21372fea38c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"getUserDetails\"",
                  "fullTitle": "User getUserDetails \"after each\" hook in \"getUserDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "1c59de19-c98e-4a11-ad9a-a08d89446bbb",
                  "parentUUID": "662b9c25-df44-481e-8ec9-c21372fea38c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send user details if token is valid and user exists",
                  "fullTitle": "User getUserDetails should send user details if token is valid and user exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodedToken = {\n  email: email,\n};\nadminJWT.verifyToken.returns(decodedToken);\nadminDB.findOne.resolves({ email: decodedToken.email });\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: decodedToken.email },\n    { password: 0, _id: 0 }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"User Details\",\n    user: { email: decodedToken.email },\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "0279b724-d323-4d14-aba5-b1c530b0c416",
                  "parentUUID": "662b9c25-df44-481e-8ec9-c21372fea38c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if token is expired",
                  "fullTitle": "User getUserDetails should send error response if token is expired",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenExpiredError = new jwt.TokenExpiredError(\"Token has expired\");\nadminJWT.verifyToken.throws(tokenExpiredError);\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "68ddf757-934c-482d-956a-2e089d37b18f",
                  "parentUUID": "662b9c25-df44-481e-8ec9-c21372fea38c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if token is invalid",
                  "fullTitle": "User getUserDetails should send error response if token is invalid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const jsonWebTokenError = new jwt.JsonWebTokenError(\"Invalid token\");\nadminJWT.verifyToken.throws(jsonWebTokenError);\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User has logged out.Kindly login again\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "33f60b4d-08e3-44a2-86b2-0c6cf286ab3b",
                  "parentUUID": "662b9c25-df44-481e-8ec9-c21372fea38c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if an error occurs",
                  "fullTitle": "User getUserDetails should send error response if an error occurs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = \"Database error\";\nadminJWT.verifyToken.throws(new Error(errorMessage));\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: errorMessage,\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "82867080-b4b5-4e9d-9546-f935e965760d",
                  "parentUUID": "662b9c25-df44-481e-8ec9-c21372fea38c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0279b724-d323-4d14-aba5-b1c530b0c416",
                "68ddf757-934c-482d-956a-2e089d37b18f",
                "33f60b4d-08e3-44a2-86b2-0c6cf286ab3b",
                "82867080-b4b5-4e9d-9546-f935e965760d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "980fd897-5352-4c03-85a2-f4fe52f86afc",
              "title": "updateProfile",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateProfile\"",
                  "fullTitle": "User updateProfile \"before each\" hook in \"updateProfile\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: stub(),\n  updateOne: stub(),\n  users: \"users\",\n};\nadminJWT = {\n  verifyToken: stub(),\n};\nreq = {\n  body: {\n    userToken: userToken,\n    city: city,\n    birthdate: birthdate,\n    address: address,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, adminJWT);",
                  "err": {},
                  "uuid": "7d1510f5-6bd4-43f9-8735-0fa3e1ca800d",
                  "parentUUID": "980fd897-5352-4c03-85a2-f4fe52f86afc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateProfile\"",
                  "fullTitle": "User updateProfile \"after each\" hook in \"updateProfile\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "6584a349-a960-4f68-a292-6225db290e60",
                  "parentUUID": "980fd897-5352-4c03-85a2-f4fe52f86afc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should update profile if user exists and token is valid",
                  "fullTitle": "User updateProfile should update profile if user exists and token is valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodedToken = {\n  email: email,\n};\nadminJWT.verifyToken.returns(decodedToken);\nadminDB.findOne.resolves({ email: decodedToken.email });\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: decodedToken.email,\n  })\n).to.be.true;\nexpect(\n  adminDB.updateOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: decodedToken.email },\n    {\n      $set: {\n        city: req.body.city,\n        birthdate: req.body.birthdate,\n        address: req.body.address,\n      },\n    }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"Profile Updated Successfully\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "94a25195-2bc0-45bb-af16-bee872484ca9",
                  "parentUUID": "980fd897-5352-4c03-85a2-f4fe52f86afc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if token is expired",
                  "fullTitle": "User updateProfile should send error response if token is expired",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenExpiredError = new TokenExpiredError(\"Token has expired\");\ntokenExpiredError.name = \"TokenExpiredError\";\nadminJWT.verifyToken.throws(tokenExpiredError);\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "b9c93ef7-8b13-4857-ac8c-8ddd2c1cd4fd",
                  "parentUUID": "980fd897-5352-4c03-85a2-f4fe52f86afc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if an error occurs during update",
                  "fullTitle": "User updateProfile should send error response if an error occurs during update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = \"Database error\";\nadminJWT.verifyToken.throws(new Error(errorMessage));\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Profile Updation Failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "add98b79-49b1-47ae-9b97-67c86ae0d6bb",
                  "parentUUID": "980fd897-5352-4c03-85a2-f4fe52f86afc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User updateProfile should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodedToken = {\n  email: \"test@example.com\",\n};\nadminJWT.verifyToken.returns(decodedToken);\nadminDB.findOne.resolves(null);\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: decodedToken.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User does not exists\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "f7a4deef-25ac-43a2-9cc1-53551446b968",
                  "parentUUID": "980fd897-5352-4c03-85a2-f4fe52f86afc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94a25195-2bc0-45bb-af16-bee872484ca9",
                "b9c93ef7-8b13-4857-ac8c-8ddd2c1cd4fd",
                "add98b79-49b1-47ae-9b97-67c86ae0d6bb",
                "f7a4deef-25ac-43a2-9cc1-53551446b968"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "03dc0587-dd20-4166-bd50-d29717e4b52e",
              "title": "fillDetails",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"fillDetails\"",
                  "fullTitle": "User fillDetails \"before each\" hook in \"fillDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: stub(),\n  insertOne: stub(),\n  users: \"users\",\n};\nreq = {\n  body: {\n    email: email,\n    password: password,\n    name: \"user\",\n    handle: handle,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB);",
                  "err": {},
                  "uuid": "c525e08a-acf9-453f-adb9-5b019b317983",
                  "parentUUID": "03dc0587-dd20-4166-bd50-d29717e4b52e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"fillDetails\"",
                  "fullTitle": "User fillDetails \"after each\" hook in \"fillDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "f364d243-b6fc-4405-bbe8-7a436d725ce7",
                  "parentUUID": "03dc0587-dd20-4166-bd50-d29717e4b52e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send error response if user already exists",
                  "fullTitle": "User fillDetails should send error response if user already exists",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const existingUser = {\n  email: req.body.email,\n};\nadminDB.findOne.resolves(existingUser);\nawait user.fillDetails(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User already exists\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "64e242b3-dd49-4987-972e-2768e7661a15",
                  "parentUUID": "03dc0587-dd20-4166-bd50-d29717e4b52e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if any required detail is missing",
                  "fullTitle": "User fillDetails should send error response if any required detail is missing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.body.email = \"\";\nreq.body.password = \"\";\nreq.body.name = \"\";\nreq.body.handle = \"\";\nawait user.fillDetails(req, res);\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Please fill all the details.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "e42d24b4-1453-45ab-b69d-9db1b5a9925e",
                  "parentUUID": "03dc0587-dd20-4166-bd50-d29717e4b52e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if bcrypt hash fails",
                  "fullTitle": "User fillDetails should send error response if bcrypt hash fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = \"Bcrypt hash failed\";\nstub(bcrypt, \"hash\").yields(new Error(errorMessage));\nawait user.fillDetails(req, res);\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User Registration Failed due to some internal error.\",\n  })\n).to.be.true;\nrestore();",
                  "err": {},
                  "uuid": "7efc953a-3ccf-455a-a362-91a33a0561e8",
                  "parentUUID": "03dc0587-dd20-4166-bd50-d29717e4b52e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register the user if all details are provided and user does not exist",
                  "fullTitle": "User fillDetails should register the user if all details are provided and user does not exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = \"hashedPassword\";\nconst newUser = {\n  email: req.body.email,\n  password: hashedPassword,\n  name: req.body.name,\n  handle: req.body.handle,\n  type: \"0\",\n  city: null,\n  birthdate: null,\n  address: null,\n};\nstub(bcrypt, \"hash\").callsFake((_password, _len, callback) => {\n  callback(null, hashedPassword);\n});\nadminDB.findOne.resolves(null);\nawait user.fillDetails(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(bcrypt.hash.called).to.be.true;\nexpect(adminDB.insertOne.calledWithExactly(adminDB.users, newUser)).to.be\n  .true;\nexpect(\n  adminDB.insertOne.calledWithExactly(adminDB.solved, {\n    handle: req.body.handle,\n    problems: [],\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"User Registered Successfully\",\n  })\n).to.be.true;\nrestore();",
                  "err": {},
                  "uuid": "d5c496d9-3f1e-4081-9417-ce5eeb5c80ba",
                  "parentUUID": "03dc0587-dd20-4166-bd50-d29717e4b52e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user registration fails",
                  "fullTitle": "User fillDetails should send error response if user registration fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = \"hashedPassword\";\nstub(bcrypt, \"hash\").callsFake((_password, _len, callback) => {\n  callback(null, hashedPassword);\n});\nadminDB.findOne.resolves(null);\nadminDB.insertOne.throws(new Error(\"Database error\"));\nawait user.fillDetails(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(bcrypt.hash.called).to.be.true;\nexpect(\n  adminDB.insertOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n    password: hashedPassword,\n    name: req.body.name,\n    handle: req.body.handle,\n    type: \"0\",\n    city: null,\n    birthdate: null,\n    address: null,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User Registration Failed\",\n  })\n).to.be.true;\nrestore();",
                  "err": {},
                  "uuid": "4b333eab-6663-423c-ad4a-5d92c3eda13e",
                  "parentUUID": "03dc0587-dd20-4166-bd50-d29717e4b52e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64e242b3-dd49-4987-972e-2768e7661a15",
                "e42d24b4-1453-45ab-b69d-9db1b5a9925e",
                "7efc953a-3ccf-455a-a362-91a33a0561e8",
                "d5c496d9-3f1e-4081-9417-ce5eeb5c80ba",
                "4b333eab-6663-423c-ad4a-5d92c3eda13e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad1c1f84-f149-4900-b6ef-952148474775",
              "title": "verifyOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"verifyOTP\"",
                  "fullTitle": "User verifyOTP \"before each\" hook in \"verifyOTP\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: stub(),\n  deleteOne: stub(),\n  otp: \"otp\",\n};\nreq = {\n  body: {\n    email: email,\n    otp: otp,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, {}, {});",
                  "err": {},
                  "uuid": "12e77a53-58ab-4220-a7f1-4d4ea3cb5402",
                  "parentUUID": "ad1c1f84-f149-4900-b6ef-952148474775",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send success response if OTP matches",
                  "fullTitle": "User verifyOTP should send success response if OTP matches",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.resolves({\n  email: req.body.email,\n  otp: req.body.otp,\n});\nawait user.verifyOTP(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  adminDB.deleteOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"OTP Verified Successfully\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "a53d8188-48f8-4351-bcf4-c62d04362c01",
                  "parentUUID": "ad1c1f84-f149-4900-b6ef-952148474775",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if OTP does not match",
                  "fullTitle": "User verifyOTP should send error response if OTP does not match",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.resolves({\n  email: req.body.email,\n  otp: \"wrongOTP\",\n});\nawait user.verifyOTP(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Invalid OTP\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "264e1542-6e28-42d3-8366-da8b6b2237f7",
                  "parentUUID": "ad1c1f84-f149-4900-b6ef-952148474775",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if OTP verification fails",
                  "fullTitle": "User verifyOTP should send error response if OTP verification fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.throws(new Error(\"Database error\"));\nawait user.verifyOTP(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"OTP Verification Failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "27f5ae5c-3384-4ce6-8c03-06d1a3305603",
                  "parentUUID": "ad1c1f84-f149-4900-b6ef-952148474775",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a53d8188-48f8-4351-bcf4-c62d04362c01",
                "264e1542-6e28-42d3-8366-da8b6b2237f7",
                "27f5ae5c-3384-4ce6-8c03-06d1a3305603"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6cf27e57-7d67-4fd3-a97d-ef53090af170",
              "title": "sendOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendOTP\"",
                  "fullTitle": "User sendOTP \"before each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = { body: { email: email } };\nres = {\n  send: stub(),\n};\n// Mocking adminDB and adminMail objects\nadminDB = {\n  findOne: stub(),\n  updateOne: stub(),\n  insertOne: stub(),\n  users: \"users\",\n  otp: \"otp\",\n};\nadminMail = {\n  sendOTP: stub(),\n};\n// Importing the sendOTP function\nuser = new User(adminDB, {}, adminMail);",
                  "err": {},
                  "uuid": "289dde98-3ad1-4b38-b3c3-3e73e8519488",
                  "parentUUID": "6cf27e57-7d67-4fd3-a97d-ef53090af170",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send OTP and respond with success message if user does not exist",
                  "fullTitle": "User sendOTP should send OTP and respond with success message if user does not exist",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to return null (user does not exist)\nadminDB.findOne.returns(null);\nconst mathRandomStub = stub(Math, \"random\").returns(0.5);\nconst mathFloorStub = stub(Math, \"floor\").returns(500000);\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(adminDB.findOne.callCount).to.equal(2);\nexpect(\n  adminDB.findOne.calledWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(mathRandomStub.calledOnce).to.be.true;\nexpect(mathFloorStub.calledOnce).to.be.true;\nexpect(adminMail.sendOTP.calledOnceWith(req.body.email, 500000)).to.be\n  .true;\nexpect(\n  adminDB.findOne.calledWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  adminDB.insertOne.calledOnceWith(adminDB.otp, {\n    email: req.body.email,\n    otp: 500000,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: true,\n    message: \"OTP Sent Successfully\",\n  })\n).to.be.true;\nmathRandomStub.restore();\nmathFloorStub.restore();",
                  "err": {},
                  "uuid": "c36ffb05-52c9-4709-b420-201ec215221e",
                  "parentUUID": "6cf27e57-7d67-4fd3-a97d-ef53090af170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send OTP and respond with success message if otp exists in the otp collection",
                  "fullTitle": "User sendOTP should send OTP and respond with success message if otp exists in the otp collection",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to return null (user does not exist)\nadminDB.findOne.onCall(0).returns(null);\nadminDB.findOne.onCall(1).returns(true);\nconst mathRandomStub = stub(Math, \"random\").returns(0.5);\nconst mathFloorStub = stub(Math, \"floor\").returns(500000);\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(mathRandomStub.calledOnce).to.be.true;\nexpect(mathFloorStub.calledOnce).to.be.true;\nexpect(adminMail.sendOTP.calledOnceWith(req.body.email, 500000)).to.be\n  .true;\nexpect(\n  adminDB.updateOne.calledOnceWith(\n    adminDB.otp,\n    { email: email },\n    { $set: { otp: 500000 } }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: true,\n    message: \"OTP Sent Successfully\",\n  })\n).to.be.true;\nmathRandomStub.restore();\nmathFloorStub.restore();",
                  "err": {},
                  "uuid": "7f52136d-6a36-4eb7-82dd-ec25f38180a6",
                  "parentUUID": "6cf27e57-7d67-4fd3-a97d-ef53090af170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user already exists",
                  "fullTitle": "User sendOTP should send error response if user already exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to return a user (user already exists)\nadminDB.findOne.returns({ email: email });\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(adminMail.sendOTP.notCalled).to.be.true;\nexpect(adminDB.insertOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"User already exists\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "e8828e9d-9f83-4e69-88ff-035aed1c3c06",
                  "parentUUID": "6cf27e57-7d67-4fd3-a97d-ef53090af170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors and respond with failure message",
                  "fullTitle": "User sendOTP should handle errors and respond with failure message",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to throw an error\nadminDB.findOne.throws(new Error(\"Database error\"));\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(adminMail.sendOTP.notCalled).to.be.true;\nexpect(adminDB.insertOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"OTP generation failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "581d8b63-4e46-4a92-8009-1c15d9b554ed",
                  "parentUUID": "6cf27e57-7d67-4fd3-a97d-ef53090af170",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c36ffb05-52c9-4709-b420-201ec215221e",
                "7f52136d-6a36-4eb7-82dd-ec25f38180a6",
                "e8828e9d-9f83-4e69-88ff-035aed1c3c06",
                "581d8b63-4e46-4a92-8009-1c15d9b554ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ce3d9a44-acbf-4e62-ba99-09025e53c59d",
              "title": "changePassword",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"changePassword\"",
                  "fullTitle": "User changePassword \"before each\" hook in \"changePassword\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req = { body: { email: email, newPassword: newpassword } };\nres = {\n  send: stub(),\n};\nadminDB = {\n  findOne: stub(),\n  updateOne: stub(),\n  users: \"users\",\n};\nuser = new User(adminDB, {}, {});",
                  "err": {},
                  "uuid": "47501361-5809-4d10-90ba-98b10ebdb55c",
                  "parentUUID": "ce3d9a44-acbf-4e62-ba99-09025e53c59d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should change password and respond with success message if user exists",
                  "fullTitle": "User changePassword should change password and respond with success message if user exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.returns({ email: email });\nconst bcryptHashStub = stub(bcrypt, \"hash\")\n  .callsArgWith(2, null, hash);\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(bcrypt.hash.calledOnceWith(req.body.newPassword, 10)).to.be.true;\nexpect(\n  adminDB.updateOne.calledOnceWith(\n    adminDB.users,\n    { email: req.body.email },\n    { $set: { password: hash } }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: true,\n    message: \"Password Changed Successfully.\",\n  })\n).to.be.true;\nbcryptHashStub.restore();",
                  "err": {},
                  "uuid": "70549ab1-3d77-4e5e-82d1-fb9798b2ae93",
                  "parentUUID": "ce3d9a44-acbf-4e62-ba99-09025e53c59d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if bcrypt.hash encounters an error",
                  "fullTitle": "User changePassword should send error response if bcrypt.hash encounters an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.returns({ email: email });\nconst bcryptHashStub = stub(bcrypt, \"hash\")\n  .callsArgWith(2, new Error(\"Hashing error\"));\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(bcrypt.hash.calledOnceWith(req.body.newPassword, 10)).to.be.true;\nexpect(adminDB.updateOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Password Updation Failed due to some internal error.\",\n  })\n).to.be.true;\nbcryptHashStub.restore();",
                  "err": {},
                  "uuid": "db0e64f5-0f23-4b37-89ae-9398ff2529ce",
                  "parentUUID": "ce3d9a44-acbf-4e62-ba99-09025e53c59d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User changePassword should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.returns(null);\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(adminDB.updateOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"User does not exists.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "401056db-d9ab-4280-846a-eff71706ed7f",
                  "parentUUID": "ce3d9a44-acbf-4e62-ba99-09025e53c59d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors and respond with failure message",
                  "fullTitle": "User changePassword should handle errors and respond with failure message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.throws(new Error(\"Database error\"));\nconst bcryptHashStub = stub(bcrypt, \"hash\")\n  .callsArgWith(2, new Error(\"Hashing error\"));\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(bcrypt.hash.notCalled).to.be.true;\nexpect(adminDB.updateOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Password Updation Failed due to some internal error.\",\n  })\n).to.be.true;\nbcryptHashStub.restore();",
                  "err": {},
                  "uuid": "90a9b753-a65a-4108-8ccc-67557937fcce",
                  "parentUUID": "ce3d9a44-acbf-4e62-ba99-09025e53c59d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70549ab1-3d77-4e5e-82d1-fb9798b2ae93",
                "db0e64f5-0f23-4b37-89ae-9398ff2529ce",
                "401056db-d9ab-4280-846a-eff71706ed7f",
                "90a9b753-a65a-4108-8ccc-67557937fcce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c333e887-7ca3-411e-9551-c33375235eda",
              "title": "userLogout",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"userLogout\"",
                  "fullTitle": "User userLogout \"before each\" hook in \"userLogout\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = { body: { userToken: 'validToken' } };\nres = {\n  send: stub(),\n};\n  \n// Mocking adminJWT and adminDB objects\nadminJWT = {\n  verifyToken: stub(),\n};\n  \nadminDB = {\n  findOne: stub(),\n  users: 'users',\n};\n\n// Importing the userLogout function\nuser = new User(adminDB, adminJWT, {});",
                  "err": {},
                  "uuid": "8bca4320-aec6-4aa1-88c8-3cb8fc6f1bae",
                  "parentUUID": "c333e887-7ca3-411e-9551-c33375235eda",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"userLogout\"",
                  "fullTitle": "User userLogout \"after each\" hook in \"userLogout\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Restoring the stubbed functions to their original implementation\nrestore();",
                  "err": {},
                  "uuid": "04998ae8-86da-49ae-b32e-d3a3f0ed9f9b",
                  "parentUUID": "c333e887-7ca3-411e-9551-c33375235eda",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send success response if user exists",
                  "fullTitle": "User userLogout should send success response if user exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return email\nadminJWT.verifyToken.returns({ email: email });\n  \n// Stubbing adminDB.findOne to return user data\nadminDB.findOne.returns({ email: email });\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(adminDB.findOne.calledOnceWith(adminDB.users, { email: email })).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: true,\n  message: 'User Logged Out Successfully',\n  userToken: '',\n})).to.be.true;",
                  "err": {},
                  "uuid": "ad4191da-d174-4c93-b73a-558a3119bf90",
                  "parentUUID": "c333e887-7ca3-411e-9551-c33375235eda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User userLogout should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return email\nadminJWT.verifyToken.returns({ email: email });\n  \n// Stubbing adminDB.findOne to return null (user does not exist)\nadminDB.findOne.returns(null);\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(adminDB.findOne.calledOnceWith(adminDB.users, { email: email })).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'User does not exists',\n})).to.be.true;",
                  "err": {},
                  "uuid": "3fa3c820-3052-46b8-b24c-f84ea3289d2a",
                  "parentUUID": "c333e887-7ca3-411e-9551-c33375235eda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle TokenExpiredError and send appropriate response",
                  "fullTitle": "User userLogout should handle TokenExpiredError and send appropriate response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw TokenExpiredError\nadminJWT.verifyToken.throws(new TokenExpiredError('Token expired'));\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'User has been logged out.',\n})).to.be.true;",
                  "err": {},
                  "uuid": "1f25ee96-2c0e-41fe-8b32-e598688795ba",
                  "parentUUID": "c333e887-7ca3-411e-9551-c33375235eda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle JsonWebTokenError and send appropriate response",
                  "fullTitle": "User userLogout should handle JsonWebTokenError and send appropriate response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw JsonWebTokenError\nadminJWT.verifyToken.throws(new JsonWebTokenError('Invalid token'));\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: \"User has logged out.Kindly login again\",\n})).to.be.true;",
                  "err": {},
                  "uuid": "27be2276-0dbf-4cdd-8d23-752818ddebe7",
                  "parentUUID": "c333e887-7ca3-411e-9551-c33375235eda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors and send appropriate response",
                  "fullTitle": "User userLogout should handle other errors and send appropriate response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw an error\nadminJWT.verifyToken.throws(new Error('Some error'));\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'Some error',\n})).to.be.true;",
                  "err": {},
                  "uuid": "7da89aca-9d33-418e-a771-4cf6a47842de",
                  "parentUUID": "c333e887-7ca3-411e-9551-c33375235eda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad4191da-d174-4c93-b73a-558a3119bf90",
                "3fa3c820-3052-46b8-b24c-f84ea3289d2a",
                "1f25ee96-2c0e-41fe-8b32-e598688795ba",
                "27be2276-0dbf-4cdd-8d23-752818ddebe7",
                "7da89aca-9d33-418e-a771-4cf6a47842de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4eac8297-19c1-4756-9b63-513536ed1c51",
              "title": "getAllHandles",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getAllHandles\"",
                  "fullTitle": "User getAllHandles \"before each\" hook in \"getAllHandles\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = {};\nres = {\n  send: stub(),\n};\n  \n// Mocking adminDB object\nadminDB = {\n  find: stub(),\n  users: 'users',\n};\n  \nuser = new User(adminDB, {}, {});",
                  "err": {},
                  "uuid": "0124366d-d91d-49d1-a3bf-d5fe31c66b7c",
                  "parentUUID": "4eac8297-19c1-4756-9b63-513536ed1c51",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"getAllHandles\"",
                  "fullTitle": "User getAllHandles \"after each\" hook in \"getAllHandles\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Restoring the stubbed functions to their original implementation\nrestore();",
                  "err": {},
                  "uuid": "f215d0ce-6fd9-4550-b9d0-28a9ddebd8fd",
                  "parentUUID": "4eac8297-19c1-4756-9b63-513536ed1c51",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should fetch all handles and send success response",
                  "fullTitle": "User getAllHandles should fetch all handles and send success response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.find to return user data\nconst users = [\n  { handle: 'handle1' },\n  { handle: 'handle2' },\n  { handle: 'handle3' },\n];\nadminDB.find.returns(users);\n  \n// Calling the getAllHandles function\nawait user.getAllHandles(req, res);\n  \n// Assertions\nexpect(adminDB.find.calledOnceWith(adminDB.users, {})).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: true,\n  message: 'All Handles',\n  handles: ['handle1', 'handle2', 'handle3'],\n})).to.be.true;",
                  "err": {},
                  "uuid": "b9af7fa6-c374-4837-bbfc-745c55f31fbf",
                  "parentUUID": "4eac8297-19c1-4756-9b63-513536ed1c51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors and send error response",
                  "fullTitle": "User getAllHandles should handle errors and send error response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.find to throw an error\nadminDB.find.throws(new Error('Database error'));\n  \n// Calling the getAllHandles function\nawait user.getAllHandles(req, res);\n  \n// Assertions\nexpect(adminDB.find.calledOnceWith(adminDB.users, {})).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'Error in fetching handles',\n})).to.be.true;",
                  "err": {},
                  "uuid": "e6071b31-1fe5-48e6-a858-c62e69bd9294",
                  "parentUUID": "4eac8297-19c1-4756-9b63-513536ed1c51",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9af7fa6-c374-4837-bbfc-745c55f31fbf",
                "e6071b31-1fe5-48e6-a858-c62e69bd9294"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "custom-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "custom-report",
        "reportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}