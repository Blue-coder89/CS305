{
  "stats": {
    "suites": 19,
    "tests": 42,
    "passes": 42,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-01T12:52:29.153Z",
    "end": "2023-05-01T12:52:30.064Z",
    "duration": 911,
    "testsRegistered": 42,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "918f2b81-4388-4602-bfd2-46a3c1409466",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d90f8bb0-5892-4109-8b10-46b5a1cab0ed",
          "title": "database",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
          "file": "/test/database.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "654271dd-71d4-4789-bbd3-5919271bd392",
              "title": "connect",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"connect\"",
                  "fullTitle": "database connect \"before each\" hook in \"connect\"",
                  "timedOut": false,
                  "duration": 68,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();  \ntestDatabase = new database(uri,databaseName);",
                  "err": {},
                  "uuid": "3c346e8b-8b3e-492b-85b6-d421f5a6c38a",
                  "parentUUID": "654271dd-71d4-4789-bbd3-5919271bd392",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"connect\"",
                  "fullTitle": "database connect \"after each\" hook in \"connect\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mongoserver.stop();",
                  "err": {},
                  "uuid": "4d340a77-9a4d-4620-9c19-cb9c360b8136",
                  "parentUUID": "654271dd-71d4-4789-bbd3-5919271bd392",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should connect to the database",
                  "fullTitle": "database connect should connect to the database",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const consoleSpy = spy(console,\"log\");\nconst dbMock = {collection : stub()} // mock database collection\nconst clientMock = {\n    connect : stub().resolves() //returns a resolved promise (Which stimulates the condition when database is connected)\n, db : stub().returns(dbMock)}; //returns a mock database\ntestDatabase.client = clientMock;\nawait testDatabase.connect();\nexpect(clientMock.connect.calledOnce).to.be.true;\nexpect(consoleSpy.calledOnce).to.be.true;\nexpect(consoleSpy.firstCall.args[0]).to.equal(\"DB Connection successful\");\nexpect(clientMock.db.calledWith(databaseName)).to.be.true;\nexpect(dbMock.collection.calledWith(\"Users\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"otp\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Problems\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Blogs\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Editorials\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"SubmittedSolutions\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Solved\")).to.be.true;\nconsoleSpy.restore();",
                  "err": {},
                  "uuid": "694bb938-6955-4ef6-baf6-0ac03b8cdb79",
                  "parentUUID": "654271dd-71d4-4789-bbd3-5919271bd392",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "694bb938-6955-4ef6-baf6-0ac03b8cdb79"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f82d9763-6067-4421-b95f-451cfe24b43b",
              "title": "findOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"findOne\"",
                  "fullTitle": "database findOne \"before each\" hook in \"findOne\"",
                  "timedOut": false,
                  "duration": 70,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "3c3d9f3b-58a9-40aa-9fed-47855cfcce99",
                  "parentUUID": "f82d9763-6067-4421-b95f-451cfe24b43b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"findOne\"",
                  "fullTitle": "database findOne \"after each\" hook in \"findOne\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "42d07cf2-f437-4a3f-acef-569de7858ddc",
                  "parentUUID": "f82d9763-6067-4421-b95f-451cfe24b43b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return a document",
                  "fullTitle": "database findOne should return a document",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21 };\nawait testDatabase.users.insertOne(doc);\n      \n// Call the findOne function with the query object\nconst query = { name: 'user' };\nconst fields = { age:21, _id:0 };\nconst result = await testDatabase.findOne(testDatabase.users, query, fields);\n      \n// Assert that the result matches the expected document\nexpect (result).to.be.an('object');\n  expect (result).to.deep.equal({ age:21 });",
                  "err": {},
                  "uuid": "965dbec0-7d6c-4eb2-9aab-64df54d4530b",
                  "parentUUID": "f82d9763-6067-4421-b95f-451cfe24b43b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "965dbec0-7d6c-4eb2-9aab-64df54d4530b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 27,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72346170-f455-40b6-9a45-f049eb224efa",
              "title": "insertOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"insertOne\"",
                  "fullTitle": "database insertOne \"before each\" hook in \"insertOne\"",
                  "timedOut": false,
                  "duration": 52,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "0003851d-d1dd-473e-a181-e808eff8dae6",
                  "parentUUID": "72346170-f455-40b6-9a45-f049eb224efa",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"insertOne\"",
                  "fullTitle": "database insertOne \"after each\" hook in \"insertOne\"",
                  "timedOut": false,
                  "duration": 8,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "0dfebcac-1129-46e7-b530-75bc2afa8055",
                  "parentUUID": "72346170-f455-40b6-9a45-f049eb224efa",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should insert a document",
                  "fullTitle": "database insertOne should insert a document",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21 };\nlet insertData = await testDatabase.insertOne(testDatabase.users,doc);\n  // Assert that the result matches the expected document\nexpect (insertData.acknowledged).to.equal(true);\nexpect (insertData.insertedId).to.not.equal(null | undefined);",
                  "err": {},
                  "uuid": "62c106c5-98cc-4eb0-b525-1142a86c5476",
                  "parentUUID": "72346170-f455-40b6-9a45-f049eb224efa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62c106c5-98cc-4eb0-b525-1142a86c5476"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e044dcf-02b3-49c5-87ca-477fea64eda8",
              "title": "updateOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateOne\"",
                  "fullTitle": "database updateOne \"before each\" hook in \"updateOne\"",
                  "timedOut": false,
                  "duration": 52,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "2a89f209-619c-4aa0-9702-08be65b3ea20",
                  "parentUUID": "3e044dcf-02b3-49c5-87ca-477fea64eda8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateOne\"",
                  "fullTitle": "database updateOne \"after each\" hook in \"updateOne\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "c30c4d59-6c4f-4757-b232-c9275bf35041",
                  "parentUUID": "3e044dcf-02b3-49c5-87ca-477fea64eda8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return a document",
                  "fullTitle": "database updateOne should return a document",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21,hobby : []};\nawait testDatabase.users.insertOne(doc);\n    \n// Call the findOne function with the query object\nlet query = { name: 'user' };\nlet result = await testDatabase.updateOne(testDatabase.users, query, {$set : {name: \"newUser\"}});\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.modifiedCount).to.equal(1);\nquery = { name: 'newUser' };\nresult = await testDatabase.updateOne(testDatabase.users, query, {$push : {hobby: \"newUser\"}});\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.modifiedCount).to.equal(1);",
                  "err": {},
                  "uuid": "8f2a5794-8f45-4d36-86a8-a2032c6b23a2",
                  "parentUUID": "3e044dcf-02b3-49c5-87ca-477fea64eda8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f2a5794-8f45-4d36-86a8-a2032c6b23a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "657398b9-3497-42a1-87a1-b33d8256be74",
              "title": "deleteOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"deleteOne\"",
                  "fullTitle": "database deleteOne \"before each\" hook in \"deleteOne\"",
                  "timedOut": false,
                  "duration": 55,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "9d49e3a7-76a8-4835-aadc-32d17650b13a",
                  "parentUUID": "657398b9-3497-42a1-87a1-b33d8256be74",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"deleteOne\"",
                  "fullTitle": "database deleteOne \"after each\" hook in \"deleteOne\"",
                  "timedOut": false,
                  "duration": 9,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "afac5a08-bfa1-49c7-b6ab-1f6a5503bcf9",
                  "parentUUID": "657398b9-3497-42a1-87a1-b33d8256be74",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should delete a document",
                  "fullTitle": "database deleteOne should delete a document",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21};\nawait testDatabase.users.insertOne(doc);\n    \n// Call the findOne function with the query object\nlet query = { name: 'user' };\nlet result = await testDatabase.deleteOne(testDatabase.users, query);\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.deletedCount).to.equal(1);",
                  "err": {},
                  "uuid": "4298eea0-b4e5-466e-bc2c-547ac04c43ec",
                  "parentUUID": "657398b9-3497-42a1-87a1-b33d8256be74",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4298eea0-b4e5-466e-bc2c-547ac04c43ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7463570b-81db-4be1-8ce4-d7624decf346",
              "title": "find",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"find\"",
                  "fullTitle": "database find \"before all\" hook in \"find\"",
                  "timedOut": false,
                  "duration": 56,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a test collection and insert some documents\nmongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.client.connect();\ntestDatabase.users = testDatabase.client.db(testDatabase.database).collection('users');\nawait testDatabase.users.insertMany([\n  { name: 'user1', age: 21 },\n  { name: 'user2', age: 22 },\n  { name: 'user3', age: 23 },\n]);",
                  "err": {},
                  "uuid": "9bb3bc21-a315-4b12-aa68-7c30ec4cff65",
                  "parentUUID": "7463570b-81db-4be1-8ce4-d7624decf346",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"find\"",
                  "fullTitle": "database find \"after all\" hook in \"find\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.client.close();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "9cf2ba5a-b65c-4ae9-8bb0-269faf160f26",
                  "parentUUID": "7463570b-81db-4be1-8ce4-d7624decf346",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should find all documents in the collection",
                  "fullTitle": "database find should find all documents in the collection",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users);\nexpect(docs).to.have.lengthOf(3);",
                  "err": {},
                  "uuid": "5e72a73c-c190-409d-a21c-71d2b38de927",
                  "parentUUID": "7463570b-81db-4be1-8ce4-d7624decf346",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should find documents with a query object",
                  "fullTitle": "database find should find documents with a query object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, { name: 'user1' });\nexpect(docs).to.have.lengthOf(1);\nexpect(docs[0].name).to.equal('user1');",
                  "err": {},
                  "uuid": "5c4a5257-1529-4055-af8c-9a5598e485da",
                  "parentUUID": "7463570b-81db-4be1-8ce4-d7624decf346",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should sort documents with a sort object",
                  "fullTitle": "database find should sort documents with a sort object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, {}, { age: -1 });\nexpect(docs).to.have.lengthOf(3);\nexpect(docs[0].name).to.equal('user3');",
                  "err": {},
                  "uuid": "c40388dd-6586-45c3-8a7f-999be1de59f7",
                  "parentUUID": "7463570b-81db-4be1-8ce4-d7624decf346",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should project documents with a fields object",
                  "fullTitle": "database find should project documents with a fields object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, {}, {}, { name: 1 });\nexpect(docs).to.have.lengthOf(3);\nexpect(docs[0].name).to.exist;\nexpect(docs[0].age).to.not.exist;",
                  "err": {},
                  "uuid": "e9ac64c2-3c40-4262-b6fc-3f76c78a33a3",
                  "parentUUID": "7463570b-81db-4be1-8ce4-d7624decf346",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e72a73c-c190-409d-a21c-71d2b38de927",
                "5c4a5257-1529-4055-af8c-9a5598e485da",
                "c40388dd-6586-45c3-8a7f-999be1de59f7",
                "e9ac64c2-3c40-4262-b6fc-3f76c78a33a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77214d51-e695-457d-998e-53717b4aa6cd",
              "title": "update",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"update\"",
                  "fullTitle": "database update \"before all\" hook in \"update\"",
                  "timedOut": false,
                  "duration": 55,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a test collection and insert some documents\nmongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.client.connect();\ntestDatabase.users = testDatabase.client.db(testDatabase.database).collection('users');\nawait testDatabase.users.insertMany([\n  { name: 'user1', age: 21,hobby:[] },\n  { name: 'user2', age: 22 ,hobby:[]},\n  { name: 'user3', age: 23 ,hobby:[]},\n]);",
                  "err": {},
                  "uuid": "73ed63af-8ed1-4ad0-980a-9977b5bf9199",
                  "parentUUID": "77214d51-e695-457d-998e-53717b4aa6cd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"update\"",
                  "fullTitle": "database update \"after all\" hook in \"update\"",
                  "timedOut": false,
                  "duration": 14,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.client.close();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "05f4365f-d3d1-4ee8-a836-f893c64f03dc",
                  "parentUUID": "77214d51-e695-457d-998e-53717b4aa6cd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should set some values to all the documents with the required filter",
                  "fullTitle": "database update should set some values to all the documents with the required filter",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.update(testDatabase.users, {  }, { $set: { age:50 } });\nexpect(docs.modifiedCount).to.equal(3);",
                  "err": {},
                  "uuid": "ea1c8f14-5a64-419c-84dd-5a24fb34fe15",
                  "parentUUID": "77214d51-e695-457d-998e-53717b4aa6cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should push values in ana array to all the documents with the required filter",
                  "fullTitle": "database update should push values in ana array to all the documents with the required filter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.update(testDatabase.users, { age: {$gt:21} }, { $push: { hobby:\"newHobby\" } });\nexpect(docs.modifiedCount).to.equal(3);",
                  "err": {},
                  "uuid": "504989b3-3912-4f65-aeac-42d08a2a09f7",
                  "parentUUID": "77214d51-e695-457d-998e-53717b4aa6cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea1c8f14-5a64-419c-84dd-5a24fb34fe15",
                "504989b3-3912-4f65-aeac-42d08a2a09f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7bc92810-e646-41ed-84b3-c55e57286da0",
          "title": "Email",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
          "file": "/test/email.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "66dae786-be29-4e6d-a57f-61935bf6b2b6",
              "title": "sendMail",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
              "file": "/test/email.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendMail\"",
                  "fullTitle": "Email sendMail \"before each\" hook in \"sendMail\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "transporter = nodemailer.createTransport(nodemailerMock());\nemail = new Email();\nemail.transporter = transporter;\nemail.sender = \"test92.test@gmail.com\";",
                  "err": {},
                  "uuid": "e88ed3f2-e028-4ca1-a10a-3311e21b3c36",
                  "parentUUID": "66dae786-be29-4e6d-a57f-61935bf6b2b6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"sendMail\"",
                  "fullTitle": "Email sendMail \"after each\" hook in \"sendMail\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "1f11e5f3-9a20-4e47-979f-27dab632bb44",
                  "parentUUID": "66dae786-be29-4e6d-a57f-61935bf6b2b6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send an email",
                  "fullTitle": "Email sendMail should send an email",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// to track the sendMail function of the email.transporter\nconst sendMailSpy = sinon.spy(email.transporter, \"sendMail\");\nconst receiver = \"nish95.sha@gmail.com\";\nconst subject = \"Test Email\";\nconst text = \"This is a test email.\";\n// call the sendMail function of the email class\nemail.sendMail(receiver, subject, text);\nexpect(sendMailSpy.calledOnce).to.be.true;\nexpect(sendMailSpy.firstCall.args[0]).to.deep.equal({\n  from: email.sender,\n  to: receiver,\n  subject: subject,\n  text: text,\n});",
                  "err": {},
                  "uuid": "2d864d95-ed8b-4078-a7de-f28538601fed",
                  "parentUUID": "66dae786-be29-4e6d-a57f-61935bf6b2b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw the error if the email fails to send",
                  "fullTitle": "Email sendMail should throw the error if the email fails to send",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// mock the sendMail function of the email.transporter\nemail.transporter.sendMail = sinon\n  .stub()\n  .yields(\"Failed to send email.\");\n  // to call the callback function of the sendMail function with the error message\nconst receiver = \"recipient@example.com\";\nconst subject = \"Test email\";\nconst text = \"This is a test email.\";\nconst errorMessage = \"Failed to send email.\";\nexpect(() => {\n  email.sendMail(receiver, subject, text);\n}).to.throw(Error, errorMessage);",
                  "err": {},
                  "uuid": "a1689384-8da6-4f3a-a618-f975d607e9f9",
                  "parentUUID": "66dae786-be29-4e6d-a57f-61935bf6b2b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d864d95-ed8b-4078-a7de-f28538601fed",
                "a1689384-8da6-4f3a-a618-f975d607e9f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74b334ce-7758-4432-8d41-4424339e0eca",
              "title": "sendOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
              "file": "/test/email.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendOTP\"",
                  "fullTitle": "Email sendOTP \"before each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "transporter = nodemailer.createTransport(nodemailerMock());\nemail = new Email();\nemail.transporter = transporter;\nemail.sender = \"test92.test@gmail.com\";\nemail.sendMail = sinon.stub().resolves();",
                  "err": {},
                  "uuid": "3e36b032-dc4f-4eaf-b020-27ae09f2293a",
                  "parentUUID": "74b334ce-7758-4432-8d41-4424339e0eca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"sendOTP\"",
                  "fullTitle": "Email sendOTP \"after each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "7b569d12-4466-422d-a62c-2a1b2a46bf9c",
                  "parentUUID": "74b334ce-7758-4432-8d41-4424339e0eca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send an OTP",
                  "fullTitle": "Email sendOTP should send an OTP",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const receiver = \"nish95.sha@gmail.com\";\nconst otp = \"123456\";\nemail.sendOTP(receiver, otp);\nexpect(\n  email.sendMail.calledOnceWithExactly(\n    receiver,\n    \"OTP\",\n    `Your OTP is ${otp}`\n  )\n).to.be.true;",
                  "err": {},
                  "uuid": "af0a3896-659b-4ede-bd7a-56d464bd16a6",
                  "parentUUID": "74b334ce-7758-4432-8d41-4424339e0eca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af0a3896-659b-4ede-bd7a-56d464bd16a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c203268a-4706-40f7-b75c-db1c4b149753",
          "title": "User",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
          "file": "/test/user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8a027207-4fae-4cc6-9492-452d32ee9623",
              "title": "userLogin",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"userLogin\"",
                  "fullTitle": "User userLogin \"before each\" hook in \"userLogin\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  users: \"users\",\n  findOne: stub(),\n};\nadminJWT = {\n  createToken: stub(),\n};\nreq = {\n  body: {\n    email: email,\n    password: password,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, adminJWT);",
                  "err": {},
                  "uuid": "d8f7aa77-e4b3-4ea1-b177-03a6294ed35a",
                  "parentUUID": "8a027207-4fae-4cc6-9492-452d32ee9623",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"userLogin\"",
                  "fullTitle": "User userLogin \"after each\" hook in \"userLogin\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "c1cf630e-886e-43e0-a2f0-29d1f4d31905",
                  "parentUUID": "8a027207-4fae-4cc6-9492-452d32ee9623",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send success response if login is successful",
                  "fullTitle": "User userLogin should send success response if login is successful",
                  "timedOut": false,
                  "duration": 131,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = bcrypt.hashSync(req.body.password, 10);\nadminDB.findOne.resolves({\n  email: req.body.email,\n  password: hashedPassword,\n  type: type,\n  handle: handle,\n});\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nadminJWT.createToken.returns(\"mockToken\");\nawait user.userLogin(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.calledOnce).to.be.true;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.true;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: true,\n  message: \"Login Successful\",\n  type: type,\n  userToken: \"mockToken\",\n});",
                  "err": {},
                  "uuid": "a49301d3-14a0-47ed-9077-c1795f2465ec",
                  "parentUUID": "8a027207-4fae-4cc6-9492-452d32ee9623",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if password does not match",
                  "fullTitle": "User userLogin should send error response if password does not match",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = bcrypt.hashSync(\"\", 10);\nadminDB.findOne.resolves({\n  email: req.body.email,\n  password: hashedPassword,\n  type: type,\n  handle: handle,\n});\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nawait user.userLogin(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.calledOnce).to.be.true;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.false;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Invalid Email or Password\",\n});",
                  "err": {},
                  "uuid": "260d60e9-48b1-4cec-9c71-f1154eda5d9a",
                  "parentUUID": "8a027207-4fae-4cc6-9492-452d32ee9623",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User userLogin should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.resolves(null);\nawait user.userLogin(req, res);\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.called).to.be.false;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.false;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Invalid Email or Password\",\n});",
                  "err": {},
                  "uuid": "012d9875-c971-4040-9508-225c5eab0b27",
                  "parentUUID": "8a027207-4fae-4cc6-9492-452d32ee9623",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if an error occurs",
                  "fullTitle": "User userLogin should send error response if an error occurs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.rejects(new Error(\"Database error\"));\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nawait user.userLogin(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.called).to.be.false;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.false;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Database error\",\n});",
                  "err": {},
                  "uuid": "0b8eb5b3-8fe6-41fc-8a1a-11f1aaafd72b",
                  "parentUUID": "8a027207-4fae-4cc6-9492-452d32ee9623",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a49301d3-14a0-47ed-9077-c1795f2465ec",
                "260d60e9-48b1-4cec-9c71-f1154eda5d9a",
                "012d9875-c971-4040-9508-225c5eab0b27",
                "0b8eb5b3-8fe6-41fc-8a1a-11f1aaafd72b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 249,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa624f3a-43f2-4eb0-b4a6-63522e9ab6cb",
              "title": "getUserDetails",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getUserDetails\"",
                  "fullTitle": "User getUserDetails \"before each\" hook in \"getUserDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  users: \"users\",\n  findOne: stub(),\n};\nadminJWT = {\n  verifyToken: stub(),\n};\nreq = {\n  body: {\n    userToken: \"mockToken\",\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, adminJWT);",
                  "err": {},
                  "uuid": "0af30bd2-eaaf-4ea5-aedc-6106126d2dec",
                  "parentUUID": "aa624f3a-43f2-4eb0-b4a6-63522e9ab6cb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"getUserDetails\"",
                  "fullTitle": "User getUserDetails \"after each\" hook in \"getUserDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "937ed7b1-74f9-4483-a6dd-71b95c93693d",
                  "parentUUID": "aa624f3a-43f2-4eb0-b4a6-63522e9ab6cb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send user details if token is valid and user exists",
                  "fullTitle": "User getUserDetails should send user details if token is valid and user exists",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodedToken = {\n  email: email,\n};\nadminJWT.verifyToken.returns(decodedToken);\nadminDB.findOne.resolves({ email: decodedToken.email });\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: decodedToken.email },\n    { password: 0, _id: 0 }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"User Details\",\n    user: { email: decodedToken.email },\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "0e43ba2c-39a5-4e80-8ff6-d97086fe7f77",
                  "parentUUID": "aa624f3a-43f2-4eb0-b4a6-63522e9ab6cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if token is expired",
                  "fullTitle": "User getUserDetails should send error response if token is expired",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenExpiredError = new jwt.TokenExpiredError(\"Token has expired\");\nadminJWT.verifyToken.throws(tokenExpiredError);\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "2ae9ee76-eae6-4577-b1fa-7abacd3ab1d5",
                  "parentUUID": "aa624f3a-43f2-4eb0-b4a6-63522e9ab6cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if token is invalid",
                  "fullTitle": "User getUserDetails should send error response if token is invalid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const jsonWebTokenError = new jwt.JsonWebTokenError(\"Invalid token\");\nadminJWT.verifyToken.throws(jsonWebTokenError);\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User has logged out.Kindly login again\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "c9fe6574-3b33-434f-a501-b9ee3cfebedf",
                  "parentUUID": "aa624f3a-43f2-4eb0-b4a6-63522e9ab6cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if an error occurs",
                  "fullTitle": "User getUserDetails should send error response if an error occurs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = \"Database error\";\nadminJWT.verifyToken.throws(new Error(errorMessage));\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: errorMessage,\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "e4eaa630-cb7e-4175-96a6-1647c0917a0f",
                  "parentUUID": "aa624f3a-43f2-4eb0-b4a6-63522e9ab6cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e43ba2c-39a5-4e80-8ff6-d97086fe7f77",
                "2ae9ee76-eae6-4577-b1fa-7abacd3ab1d5",
                "c9fe6574-3b33-434f-a501-b9ee3cfebedf",
                "e4eaa630-cb7e-4175-96a6-1647c0917a0f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d49acf44-d6af-4961-83ca-6e2b53719ea3",
              "title": "updateProfile",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateProfile\"",
                  "fullTitle": "User updateProfile \"before each\" hook in \"updateProfile\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: stub(),\n  updateOne: stub(),\n  users: \"users\",\n};\nadminJWT = {\n  verifyToken: stub(),\n};\nreq = {\n  body: {\n    userToken: userToken,\n    city: city,\n    birthdate: birthdate,\n    address: address,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, adminJWT);",
                  "err": {},
                  "uuid": "e17249c7-15dd-40b0-8d70-a3858b709b7b",
                  "parentUUID": "d49acf44-d6af-4961-83ca-6e2b53719ea3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateProfile\"",
                  "fullTitle": "User updateProfile \"after each\" hook in \"updateProfile\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "8c2bdc2d-09ee-4995-8246-a032b2f6c5e1",
                  "parentUUID": "d49acf44-d6af-4961-83ca-6e2b53719ea3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should update profile if user exists and token is valid",
                  "fullTitle": "User updateProfile should update profile if user exists and token is valid",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodedToken = {\n  email: email,\n};\nadminJWT.verifyToken.returns(decodedToken);\nadminDB.findOne.resolves({ email: decodedToken.email });\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: decodedToken.email,\n  })\n).to.be.true;\nexpect(\n  adminDB.updateOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: decodedToken.email },\n    {\n      $set: {\n        city: req.body.city,\n        birthdate: req.body.birthdate,\n        address: req.body.address,\n      },\n    }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"Profile Updated Successfully\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "c7ee605f-fb6b-4174-bfec-d55ff8f0b900",
                  "parentUUID": "d49acf44-d6af-4961-83ca-6e2b53719ea3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if token is expired",
                  "fullTitle": "User updateProfile should send error response if token is expired",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenExpiredError = new TokenExpiredError(\"Token has expired\");\ntokenExpiredError.name = \"TokenExpiredError\";\nadminJWT.verifyToken.throws(tokenExpiredError);\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "1bbf227c-9703-42c9-9af7-c100dc83a6ec",
                  "parentUUID": "d49acf44-d6af-4961-83ca-6e2b53719ea3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if an error occurs during update",
                  "fullTitle": "User updateProfile should send error response if an error occurs during update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = \"Database error\";\nadminJWT.verifyToken.throws(new Error(errorMessage));\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Profile Updation Failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "8136eb27-1842-478e-b67a-2b0bd85774d1",
                  "parentUUID": "d49acf44-d6af-4961-83ca-6e2b53719ea3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User updateProfile should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodedToken = {\n  email: \"test@example.com\",\n};\nadminJWT.verifyToken.returns(decodedToken);\nadminDB.findOne.resolves(null);\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: decodedToken.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User does not exists\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "a2a46c3a-e0d2-4ddb-a39b-3903bcd4db08",
                  "parentUUID": "d49acf44-d6af-4961-83ca-6e2b53719ea3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7ee605f-fb6b-4174-bfec-d55ff8f0b900",
                "1bbf227c-9703-42c9-9af7-c100dc83a6ec",
                "8136eb27-1842-478e-b67a-2b0bd85774d1",
                "a2a46c3a-e0d2-4ddb-a39b-3903bcd4db08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "76a30815-ee0e-4ffd-b36c-601482cc8d77",
              "title": "fillDetails",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"fillDetails\"",
                  "fullTitle": "User fillDetails \"before each\" hook in \"fillDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: stub(),\n  insertOne: stub(),\n  users: \"users\",\n};\nreq = {\n  body: {\n    email: email,\n    password: password,\n    name: \"user\",\n    handle: handle,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB);",
                  "err": {},
                  "uuid": "406792a5-fdc7-4a4d-8d46-82b52d180338",
                  "parentUUID": "76a30815-ee0e-4ffd-b36c-601482cc8d77",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"fillDetails\"",
                  "fullTitle": "User fillDetails \"after each\" hook in \"fillDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "38895970-6b00-4263-a92b-d38f8ab58801",
                  "parentUUID": "76a30815-ee0e-4ffd-b36c-601482cc8d77",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send error response if user already exists",
                  "fullTitle": "User fillDetails should send error response if user already exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const existingUser = {\n  email: req.body.email,\n};\nadminDB.findOne.resolves(existingUser);\nawait user.fillDetails(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User already exists\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "21e071ec-c1d1-45da-ae2a-b419466951af",
                  "parentUUID": "76a30815-ee0e-4ffd-b36c-601482cc8d77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if any required detail is missing",
                  "fullTitle": "User fillDetails should send error response if any required detail is missing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.body.email = \"\";\nreq.body.password = \"\";\nreq.body.name = \"\";\nreq.body.handle = \"\";\nawait user.fillDetails(req, res);\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Please fill all the details.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "4bac03d7-a093-42bc-adfd-91384eb2bd56",
                  "parentUUID": "76a30815-ee0e-4ffd-b36c-601482cc8d77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if bcrypt hash fails",
                  "fullTitle": "User fillDetails should send error response if bcrypt hash fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = \"Bcrypt hash failed\";\nstub(bcrypt, \"hash\").yields(new Error(errorMessage));\nawait user.fillDetails(req, res);\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User Registration Failed due to some internal error.\",\n  })\n).to.be.true;\nrestore();",
                  "err": {},
                  "uuid": "6f7dc479-b6d1-47f7-8841-7d9f69ff595e",
                  "parentUUID": "76a30815-ee0e-4ffd-b36c-601482cc8d77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register the user if all details are provided and user does not exist",
                  "fullTitle": "User fillDetails should register the user if all details are provided and user does not exist",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = \"hashedPassword\";\nconst newUser = {\n  email: req.body.email,\n  password: hashedPassword,\n  name: req.body.name,\n  handle: req.body.handle,\n  type: \"0\",\n  city: null,\n  birthdate: null,\n  address: null,\n};\nstub(bcrypt, \"hash\").callsFake((_password, _len, callback) => {\n  callback(null, hashedPassword);\n});\nadminDB.findOne.resolves(null);\nawait user.fillDetails(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(bcrypt.hash.called).to.be.true;\nexpect(adminDB.insertOne.calledWithExactly(adminDB.users, newUser)).to.be\n  .true;\nexpect(\n  adminDB.insertOne.calledWithExactly(adminDB.solved, {\n    handle: req.body.handle,\n    problems: [],\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"User Registered Successfully\",\n  })\n).to.be.true;\nrestore();",
                  "err": {},
                  "uuid": "e819359f-f915-4c54-a734-aa4c17b3965a",
                  "parentUUID": "76a30815-ee0e-4ffd-b36c-601482cc8d77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user registration fails",
                  "fullTitle": "User fillDetails should send error response if user registration fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = \"hashedPassword\";\nstub(bcrypt, \"hash\").callsFake((_password, _len, callback) => {\n  callback(null, hashedPassword);\n});\nadminDB.findOne.resolves(null);\nadminDB.insertOne.throws(new Error(\"Database error\"));\nawait user.fillDetails(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(bcrypt.hash.called).to.be.true;\nexpect(\n  adminDB.insertOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n    password: hashedPassword,\n    name: req.body.name,\n    handle: req.body.handle,\n    type: \"0\",\n    city: null,\n    birthdate: null,\n    address: null,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User Registration Failed\",\n  })\n).to.be.true;\nrestore();",
                  "err": {},
                  "uuid": "d41f1a1b-ff86-4558-87ca-d5e532b6fb07",
                  "parentUUID": "76a30815-ee0e-4ffd-b36c-601482cc8d77",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "21e071ec-c1d1-45da-ae2a-b419466951af",
                "4bac03d7-a093-42bc-adfd-91384eb2bd56",
                "6f7dc479-b6d1-47f7-8841-7d9f69ff595e",
                "e819359f-f915-4c54-a734-aa4c17b3965a",
                "d41f1a1b-ff86-4558-87ca-d5e532b6fb07"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2f2b59f9-e260-4551-b6ac-ff16b871f019",
              "title": "verifyOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"verifyOTP\"",
                  "fullTitle": "User verifyOTP \"before each\" hook in \"verifyOTP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: stub(),\n  deleteOne: stub(),\n  otp: \"otp\",\n};\nreq = {\n  body: {\n    email: email,\n    otp: otp,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, {}, {});",
                  "err": {},
                  "uuid": "cfbb7085-2807-4670-b171-ac5572b032ef",
                  "parentUUID": "2f2b59f9-e260-4551-b6ac-ff16b871f019",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send success response if OTP matches",
                  "fullTitle": "User verifyOTP should send success response if OTP matches",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.resolves({\n  email: req.body.email,\n  otp: req.body.otp,\n});\nawait user.verifyOTP(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  adminDB.deleteOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"OTP Verified Successfully\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "37b7ba09-53e1-49f6-8524-efc1ab4421ef",
                  "parentUUID": "2f2b59f9-e260-4551-b6ac-ff16b871f019",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if OTP does not match",
                  "fullTitle": "User verifyOTP should send error response if OTP does not match",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.resolves({\n  email: req.body.email,\n  otp: \"wrongOTP\",\n});\nawait user.verifyOTP(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Invalid OTP\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "58c8fd64-8ec0-496e-a77a-79c9537a44f5",
                  "parentUUID": "2f2b59f9-e260-4551-b6ac-ff16b871f019",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if OTP verification fails",
                  "fullTitle": "User verifyOTP should send error response if OTP verification fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.throws(new Error(\"Database error\"));\nawait user.verifyOTP(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"OTP Verification Failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "45db5ab2-5fbc-4483-b3c5-9fe85b59a9d7",
                  "parentUUID": "2f2b59f9-e260-4551-b6ac-ff16b871f019",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37b7ba09-53e1-49f6-8524-efc1ab4421ef",
                "58c8fd64-8ec0-496e-a77a-79c9537a44f5",
                "45db5ab2-5fbc-4483-b3c5-9fe85b59a9d7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "629225a4-e9db-4398-9260-fa0f158c1e07",
              "title": "sendOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendOTP\"",
                  "fullTitle": "User sendOTP \"before each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = { body: { email: email } };\nres = {\n  send: stub(),\n};\n// Mocking adminDB and adminMail objects\nadminDB = {\n  findOne: stub(),\n  updateOne: stub(),\n  insertOne: stub(),\n  users: \"users\",\n  otp: \"otp\",\n};\nadminMail = {\n  sendOTP: stub(),\n};\n// Importing the sendOTP function\nuser = new User(adminDB, {}, adminMail);",
                  "err": {},
                  "uuid": "354b642a-2787-4031-a05c-7a02d2f82d29",
                  "parentUUID": "629225a4-e9db-4398-9260-fa0f158c1e07",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send OTP and respond with success message if user does not exist",
                  "fullTitle": "User sendOTP should send OTP and respond with success message if user does not exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to return null (user does not exist)\nadminDB.findOne.returns(null);\nconst mathRandomStub = stub(Math, \"random\").returns(0.5);\nconst mathFloorStub = stub(Math, \"floor\").returns(500000);\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(adminDB.findOne.callCount).to.equal(2);\nexpect(\n  adminDB.findOne.calledWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(mathRandomStub.calledOnce).to.be.true;\nexpect(mathFloorStub.calledOnce).to.be.true;\nexpect(adminMail.sendOTP.calledOnceWith(req.body.email, 500000)).to.be\n  .true;\nexpect(\n  adminDB.findOne.calledWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  adminDB.insertOne.calledOnceWith(adminDB.otp, {\n    email: req.body.email,\n    otp: 500000,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: true,\n    message: \"OTP Sent Successfully\",\n  })\n).to.be.true;\nmathRandomStub.restore();\nmathFloorStub.restore();",
                  "err": {},
                  "uuid": "a360aba2-3453-4fd3-9cfb-d3b270231939",
                  "parentUUID": "629225a4-e9db-4398-9260-fa0f158c1e07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send OTP and respond with success message if otp exists in the otp collection",
                  "fullTitle": "User sendOTP should send OTP and respond with success message if otp exists in the otp collection",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to return null (user does not exist)\nadminDB.findOne.onCall(0).returns(null);\nadminDB.findOne.onCall(1).returns(true);\nconst mathRandomStub = stub(Math, \"random\").returns(0.5);\nconst mathFloorStub = stub(Math, \"floor\").returns(500000);\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(mathRandomStub.calledOnce).to.be.true;\nexpect(mathFloorStub.calledOnce).to.be.true;\nexpect(adminMail.sendOTP.calledOnceWith(req.body.email, 500000)).to.be\n  .true;\nexpect(\n  adminDB.updateOne.calledOnceWith(\n    adminDB.otp,\n    { email: email },\n    { $set: { otp: 500000 } }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: true,\n    message: \"OTP Sent Successfully\",\n  })\n).to.be.true;\nmathRandomStub.restore();\nmathFloorStub.restore();",
                  "err": {},
                  "uuid": "a0b5d944-c188-4978-8c0a-fc6f661d89ee",
                  "parentUUID": "629225a4-e9db-4398-9260-fa0f158c1e07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user already exists",
                  "fullTitle": "User sendOTP should send error response if user already exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to return a user (user already exists)\nadminDB.findOne.returns({ email: email });\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(adminMail.sendOTP.notCalled).to.be.true;\nexpect(adminDB.insertOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"User already exists\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "480cbc86-9c3f-4e77-ba6d-119e41ff29a3",
                  "parentUUID": "629225a4-e9db-4398-9260-fa0f158c1e07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors and respond with failure message",
                  "fullTitle": "User sendOTP should handle errors and respond with failure message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to throw an error\nadminDB.findOne.throws(new Error(\"Database error\"));\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(adminMail.sendOTP.notCalled).to.be.true;\nexpect(adminDB.insertOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"OTP generation failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "f9794b05-018b-4338-97a5-a3814f8e5212",
                  "parentUUID": "629225a4-e9db-4398-9260-fa0f158c1e07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a360aba2-3453-4fd3-9cfb-d3b270231939",
                "a0b5d944-c188-4978-8c0a-fc6f661d89ee",
                "480cbc86-9c3f-4e77-ba6d-119e41ff29a3",
                "f9794b05-018b-4338-97a5-a3814f8e5212"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c141338-d073-4a69-81ec-4681f3c55a8b",
              "title": "changePassword",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"changePassword\"",
                  "fullTitle": "User changePassword \"before each\" hook in \"changePassword\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req = { body: { email: email, newPassword: newpassword } };\nres = {\n  send: stub(),\n};\nadminDB = {\n  findOne: stub(),\n  updateOne: stub(),\n  users: \"users\",\n};\nuser = new User(adminDB, {}, {});",
                  "err": {},
                  "uuid": "7ea38de9-f1b9-498c-ae7d-88e61cf1a7ab",
                  "parentUUID": "0c141338-d073-4a69-81ec-4681f3c55a8b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should change password and respond with success message if user exists",
                  "fullTitle": "User changePassword should change password and respond with success message if user exists",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.returns({ email: email });\nconst bcryptHashStub = stub(bcrypt, \"hash\")\n  .callsArgWith(2, null, hash);\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(bcrypt.hash.calledOnceWith(req.body.newPassword, 10)).to.be.true;\nexpect(\n  adminDB.updateOne.calledOnceWith(\n    adminDB.users,\n    { email: req.body.email },\n    { $set: { password: hash } }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: true,\n    message: \"Password Changed Successfully.\",\n  })\n).to.be.true;\nbcryptHashStub.restore();",
                  "err": {},
                  "uuid": "3f34f758-097a-4a15-ab28-5b5d92b3d88d",
                  "parentUUID": "0c141338-d073-4a69-81ec-4681f3c55a8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if bcrypt.hash encounters an error",
                  "fullTitle": "User changePassword should send error response if bcrypt.hash encounters an error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.returns({ email: email });\nconst bcryptHashStub = stub(bcrypt, \"hash\")\n  .callsArgWith(2, new Error(\"Hashing error\"));\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(bcrypt.hash.calledOnceWith(req.body.newPassword, 10)).to.be.true;\nexpect(adminDB.updateOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Password Updation Failed due to some internal error.\",\n  })\n).to.be.true;\nbcryptHashStub.restore();",
                  "err": {},
                  "uuid": "c87f35da-d8b3-4ae6-9747-8347e64f4d55",
                  "parentUUID": "0c141338-d073-4a69-81ec-4681f3c55a8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User changePassword should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.returns(null);\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(adminDB.updateOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"User does not exists.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "a9f73f0a-34f6-44c6-bc9c-b98e9880956a",
                  "parentUUID": "0c141338-d073-4a69-81ec-4681f3c55a8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors and respond with failure message",
                  "fullTitle": "User changePassword should handle errors and respond with failure message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.throws(new Error(\"Database error\"));\nconst bcryptHashStub = stub(bcrypt, \"hash\")\n  .callsArgWith(2, new Error(\"Hashing error\"));\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(bcrypt.hash.notCalled).to.be.true;\nexpect(adminDB.updateOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Password Updation Failed due to some internal error.\",\n  })\n).to.be.true;\nbcryptHashStub.restore();",
                  "err": {},
                  "uuid": "be284450-1f7a-4992-9649-023e0d3a424d",
                  "parentUUID": "0c141338-d073-4a69-81ec-4681f3c55a8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f34f758-097a-4a15-ab28-5b5d92b3d88d",
                "c87f35da-d8b3-4ae6-9747-8347e64f4d55",
                "a9f73f0a-34f6-44c6-bc9c-b98e9880956a",
                "be284450-1f7a-4992-9649-023e0d3a424d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "custom-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "custom-report",
        "reportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}