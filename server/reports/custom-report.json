{
  "stats": {
    "suites": 11,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2023-04-29T18:37:49.456Z",
    "end": "2023-04-29T18:37:50.026Z",
    "duration": 570,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3fb60b28-93e0-4b2f-8a7f-231bb5faa2d1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0430eaec-dde3-469a-881c-b8b337703ba8",
          "title": "database",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
          "file": "/test/database.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6d2eab09-32ee-479d-a58e-78606dc1638c",
              "title": "connect",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"connect\"",
                  "fullTitle": "database connect \"before each\" hook in \"connect\"",
                  "timedOut": false,
                  "duration": 74,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();  \ntestDatabase = new database(uri,databaseName);",
                  "err": {},
                  "uuid": "96c8291e-085a-42f2-9f05-dc4c80252c1e",
                  "parentUUID": "6d2eab09-32ee-479d-a58e-78606dc1638c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"connect\"",
                  "fullTitle": "database connect \"after each\" hook in \"connect\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mongoserver.stop();",
                  "err": {},
                  "uuid": "478bf1c0-5c31-4d49-822e-982a98db5493",
                  "parentUUID": "6d2eab09-32ee-479d-a58e-78606dc1638c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should connect to the database",
                  "fullTitle": "database connect should connect to the database",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const consoleSpy = spy(console,\"log\");\nconst dbMock = {collection : stub()} // mock database collection\nconst clientMock = {\n    connect : stub().resolves() //returns a resolved promise (Which stimulates the condition when database is connected)\n, db : stub().returns(dbMock)}; //returns a mock database\ntestDatabase.client = clientMock;\nawait testDatabase.connect();\nexpect(clientMock.connect.calledOnce).to.be.true;\nexpect(consoleSpy.calledOnce).to.be.true;\nexpect(consoleSpy.firstCall.args[0]).to.equal(\"DB Connection successful\");\nexpect(clientMock.db.calledWith(databaseName)).to.be.true;\nexpect(dbMock.collection.calledWith(\"Users\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"otp\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Problems\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Blogs\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Editorials\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"SubmittedSolutions\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Solved\")).to.be.true;\nconsoleSpy.restore();",
                  "err": {},
                  "uuid": "4c132627-9eef-42a6-a4d1-98c3e56c79e5",
                  "parentUUID": "6d2eab09-32ee-479d-a58e-78606dc1638c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c132627-9eef-42a6-a4d1-98c3e56c79e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a75edda-17fd-41eb-8180-66c072cdb587",
              "title": "findOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"findOne\"",
                  "fullTitle": "database findOne \"before each\" hook in \"findOne\"",
                  "timedOut": false,
                  "duration": 67,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "57ecf9d7-4574-408c-9885-eb77456c8e93",
                  "parentUUID": "6a75edda-17fd-41eb-8180-66c072cdb587",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"findOne\"",
                  "fullTitle": "database findOne \"after each\" hook in \"findOne\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "592962df-dfde-4cdd-9f90-9996b62b7bf1",
                  "parentUUID": "6a75edda-17fd-41eb-8180-66c072cdb587",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return a document",
                  "fullTitle": "database findOne should return a document",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21 };\nawait testDatabase.users.insertOne(doc);\n      \n// Call the findOne function with the query object\nconst query = { name: 'user' };\nconst fields = { age:21, _id:0 };\nconst result = await testDatabase.findOne(testDatabase.users, query, fields);\n      \n// Assert that the result matches the expected document\nexpect (result).to.be.an('object');\n  expect (result).to.deep.equal({ age:21 });",
                  "err": {},
                  "uuid": "02a372f8-abf7-443b-8664-ff73a24f5bdb",
                  "parentUUID": "6a75edda-17fd-41eb-8180-66c072cdb587",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02a372f8-abf7-443b-8664-ff73a24f5bdb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "32ac4b10-d42e-4f16-b19f-b63dcb8bd2ae",
              "title": "insertOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"insertOne\"",
                  "fullTitle": "database insertOne \"before each\" hook in \"insertOne\"",
                  "timedOut": false,
                  "duration": 54,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "c9d395e3-8e35-4c55-b5d9-3ba48a72582a",
                  "parentUUID": "32ac4b10-d42e-4f16-b19f-b63dcb8bd2ae",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"insertOne\"",
                  "fullTitle": "database insertOne \"after each\" hook in \"insertOne\"",
                  "timedOut": false,
                  "duration": 14,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "08b1312d-b2b2-455f-a030-76403a24a52e",
                  "parentUUID": "32ac4b10-d42e-4f16-b19f-b63dcb8bd2ae",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should insert a document",
                  "fullTitle": "database insertOne should insert a document",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21 };\nlet insertData = await testDatabase.insertOne(testDatabase.users,doc);\n  // Assert that the result matches the expected document\nexpect (insertData.acknowledged).to.equal(true);\nexpect (insertData.insertedId).to.not.equal(null | undefined);",
                  "err": {},
                  "uuid": "7235ae17-dc1c-4164-b138-e12f27a17841",
                  "parentUUID": "32ac4b10-d42e-4f16-b19f-b63dcb8bd2ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7235ae17-dc1c-4164-b138-e12f27a17841"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2ebba4ab-3151-4e18-87e0-a9592ac3ea33",
              "title": "updateOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateOne\"",
                  "fullTitle": "database updateOne \"before each\" hook in \"updateOne\"",
                  "timedOut": false,
                  "duration": 48,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "9c57d52f-7763-4945-b2e5-81dd854c103a",
                  "parentUUID": "2ebba4ab-3151-4e18-87e0-a9592ac3ea33",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateOne\"",
                  "fullTitle": "database updateOne \"after each\" hook in \"updateOne\"",
                  "timedOut": false,
                  "duration": 14,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "47948ccc-7ed2-4738-a6e6-7e6c6b610ef1",
                  "parentUUID": "2ebba4ab-3151-4e18-87e0-a9592ac3ea33",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return a document",
                  "fullTitle": "database updateOne should return a document",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21,hobby : []};\nawait testDatabase.users.insertOne(doc);\n    \n// Call the findOne function with the query object\nlet query = { name: 'user' };\nlet result = await testDatabase.updateOne(testDatabase.users, query, {$set : {name: \"newUser\"}});\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.modifiedCount).to.equal(1);\nquery = { name: 'newUser' };\nresult = await testDatabase.updateOne(testDatabase.users, query, {$push : {hobby: \"newUser\"}});\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.modifiedCount).to.equal(1);",
                  "err": {},
                  "uuid": "52f6b75a-ed1d-4a03-887f-e8b4d518567e",
                  "parentUUID": "2ebba4ab-3151-4e18-87e0-a9592ac3ea33",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52f6b75a-ed1d-4a03-887f-e8b4d518567e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6dc931ea-d7c6-48dd-af0f-ec265c89aff7",
              "title": "deleteOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"deleteOne\"",
                  "fullTitle": "database deleteOne \"before each\" hook in \"deleteOne\"",
                  "timedOut": false,
                  "duration": 46,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "053d4de5-dffc-4297-a8a9-0a9f2a336c74",
                  "parentUUID": "6dc931ea-d7c6-48dd-af0f-ec265c89aff7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"deleteOne\"",
                  "fullTitle": "database deleteOne \"after each\" hook in \"deleteOne\"",
                  "timedOut": false,
                  "duration": 11,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "4177c6ce-d4e1-40f2-a65e-bf7d2c5714ec",
                  "parentUUID": "6dc931ea-d7c6-48dd-af0f-ec265c89aff7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should delete a document",
                  "fullTitle": "database deleteOne should delete a document",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21};\nawait testDatabase.users.insertOne(doc);\n    \n// Call the findOne function with the query object\nlet query = { name: 'user' };\nlet result = await testDatabase.deleteOne(testDatabase.users, query);\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.deletedCount).to.equal(1);",
                  "err": {},
                  "uuid": "7d58e3e8-38f2-4711-97d0-cf366ef35383",
                  "parentUUID": "6dc931ea-d7c6-48dd-af0f-ec265c89aff7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d58e3e8-38f2-4711-97d0-cf366ef35383"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "245f0ca7-1ab7-427f-b57d-3d0f8fc226e2",
              "title": "find",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"find\"",
                  "fullTitle": "database find \"before all\" hook in \"find\"",
                  "timedOut": false,
                  "duration": 58,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a test collection and insert some documents\nmongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.client.connect();\ntestDatabase.users = testDatabase.client.db(testDatabase.database).collection('users');\nawait testDatabase.users.insertMany([\n  { name: 'user1', age: 21 },\n  { name: 'user2', age: 22 },\n  { name: 'user3', age: 23 },\n]);",
                  "err": {},
                  "uuid": "235db773-06d1-4514-92c1-047afa384631",
                  "parentUUID": "245f0ca7-1ab7-427f-b57d-3d0f8fc226e2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"find\"",
                  "fullTitle": "database find \"after all\" hook in \"find\"",
                  "timedOut": false,
                  "duration": 13,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.client.close();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "a7f5a3c0-2835-4b56-87ca-09e4854d8bf4",
                  "parentUUID": "245f0ca7-1ab7-427f-b57d-3d0f8fc226e2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should find all documents in the collection",
                  "fullTitle": "database find should find all documents in the collection",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users);\nexpect(docs).to.have.lengthOf(3);",
                  "err": {},
                  "uuid": "24987e31-c540-412e-a486-dbed23fa27f5",
                  "parentUUID": "245f0ca7-1ab7-427f-b57d-3d0f8fc226e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should find documents with a query object",
                  "fullTitle": "database find should find documents with a query object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, { name: 'user1' });\nexpect(docs).to.have.lengthOf(1);\nexpect(docs[0].name).to.equal('user1');",
                  "err": {},
                  "uuid": "00b360d3-38ab-4e0f-a21b-48e1b48d9412",
                  "parentUUID": "245f0ca7-1ab7-427f-b57d-3d0f8fc226e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should sort documents with a sort object",
                  "fullTitle": "database find should sort documents with a sort object",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, {}, { age: -1 });\nexpect(docs).to.have.lengthOf(3);\nexpect(docs[0].name).to.equal('user3');",
                  "err": {},
                  "uuid": "675419ed-d259-4d7b-8a6a-ee650ba85b21",
                  "parentUUID": "245f0ca7-1ab7-427f-b57d-3d0f8fc226e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should project documents with a fields object",
                  "fullTitle": "database find should project documents with a fields object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, {}, {}, { name: 1 });\nexpect(docs).to.have.lengthOf(3);\nexpect(docs[0].name).to.exist;\nexpect(docs[0].age).to.not.exist;",
                  "err": {},
                  "uuid": "4f08ad98-0951-4f88-9d9b-1f080fef08ad",
                  "parentUUID": "245f0ca7-1ab7-427f-b57d-3d0f8fc226e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "24987e31-c540-412e-a486-dbed23fa27f5",
                "00b360d3-38ab-4e0f-a21b-48e1b48d9412",
                "675419ed-d259-4d7b-8a6a-ee650ba85b21",
                "4f08ad98-0951-4f88-9d9b-1f080fef08ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8c263d6d-5454-4cc6-8158-f6d5eb610a68",
              "title": "update",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"update\"",
                  "fullTitle": "database update \"before all\" hook in \"update\"",
                  "timedOut": false,
                  "duration": 60,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a test collection and insert some documents\nmongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.client.connect();\ntestDatabase.users = testDatabase.client.db(testDatabase.database).collection('users');\nawait testDatabase.users.insertMany([\n  { name: 'user1', age: 21,hobby:[] },\n  { name: 'user2', age: 22 ,hobby:[]},\n  { name: 'user3', age: 23 ,hobby:[]},\n]);",
                  "err": {},
                  "uuid": "df580281-aeba-41b0-8593-cabf7de333b2",
                  "parentUUID": "8c263d6d-5454-4cc6-8158-f6d5eb610a68",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"update\"",
                  "fullTitle": "database update \"after all\" hook in \"update\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.client.close();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "4e38e530-6c7b-47a5-89d4-5dad6a772528",
                  "parentUUID": "8c263d6d-5454-4cc6-8158-f6d5eb610a68",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should set some values to all the documents with the required filter",
                  "fullTitle": "database update should set some values to all the documents with the required filter",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.update(testDatabase.users, {  }, { $set: { age:50 } });\nconsole.log(docs)\nexpect(docs.modifiedCount).to.equal(3);",
                  "err": {},
                  "uuid": "1071ac5c-44fe-4c65-a7cb-3d808df650a2",
                  "parentUUID": "8c263d6d-5454-4cc6-8158-f6d5eb610a68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should push values in ana array to all the documents with the required filter",
                  "fullTitle": "database update should push values in ana array to all the documents with the required filter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.update(testDatabase.users, { age: {$gt:21} }, { $push: { hobby:\"newHobby\" } });\nexpect(docs.modifiedCount).to.equal(3);",
                  "err": {},
                  "uuid": "3877de50-c2d9-4462-888c-af92fce35c9b",
                  "parentUUID": "8c263d6d-5454-4cc6-8158-f6d5eb610a68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1071ac5c-44fe-4c65-a7cb-3d808df650a2",
                "3877de50-c2d9-4462-888c-af92fce35c9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "863440eb-5c29-4bfc-8f52-7e017ee4b8cf",
          "title": "Email",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
          "file": "/test/email.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a2f4665a-197d-4e7c-b0bb-e91f5731a360",
              "title": "sendMail",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
              "file": "/test/email.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendMail\"",
                  "fullTitle": "Email sendMail \"before each\" hook in \"sendMail\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "transporter = nodemailer.createTransport(nodemailerMock());\nemail = new Email();\nemail.transporter = transporter;\nemail.sender = \"test92.test@gmail.com\";",
                  "err": {},
                  "uuid": "946e3d37-7020-47f3-9d62-6ed026ab1322",
                  "parentUUID": "a2f4665a-197d-4e7c-b0bb-e91f5731a360",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"sendMail\"",
                  "fullTitle": "Email sendMail \"after each\" hook in \"sendMail\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "8d696a54-8b04-4fef-81c3-261960d9dc2c",
                  "parentUUID": "a2f4665a-197d-4e7c-b0bb-e91f5731a360",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send an email",
                  "fullTitle": "Email sendMail should send an email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// to track the sendMail function of the email.transporter\nconst sendMailSpy = sinon.spy(email.transporter, \"sendMail\");\nconst receiver = \"nish95.sha@gmail.com\";\nconst subject = \"Test Email\";\nconst text = \"This is a test email.\";\n// call the sendMail function of the email class\nemail.sendMail(receiver, subject, text);\nexpect(sendMailSpy.calledOnce).to.be.true;\nexpect(sendMailSpy.firstCall.args[0]).to.deep.equal({\n  from: email.sender,\n  to: receiver,\n  subject: subject,\n  text: text,\n});",
                  "err": {},
                  "uuid": "084e7eee-1499-4c4c-a48c-c78827a0727e",
                  "parentUUID": "a2f4665a-197d-4e7c-b0bb-e91f5731a360",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw the error if the email fails to send",
                  "fullTitle": "Email sendMail should throw the error if the email fails to send",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// mock the sendMail function of the email.transporter\nemail.transporter.sendMail = sinon\n  .stub()\n  .yields(\"Failed to send email.\");\n  // to call the callback function of the sendMail function with the error message\nconst receiver = \"recipient@example.com\";\nconst subject = \"Test email\";\nconst text = \"This is a test email.\";\nconst errorMessage = \"Failed to send email.\";\nexpect(() => {\n  email.sendMail(receiver, subject, text);\n}).to.throw(Error, errorMessage);",
                  "err": {},
                  "uuid": "697ad4c1-1bf5-4b89-8b6b-d40cbe7d234e",
                  "parentUUID": "a2f4665a-197d-4e7c-b0bb-e91f5731a360",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "084e7eee-1499-4c4c-a48c-c78827a0727e",
                "697ad4c1-1bf5-4b89-8b6b-d40cbe7d234e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2bb14a17-da7b-4ed3-a5b3-4723ae7b22ce",
              "title": "sendOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
              "file": "/test/email.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendOTP\"",
                  "fullTitle": "Email sendOTP \"before each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "transporter = nodemailer.createTransport(nodemailerMock());\nemail = new Email();\nemail.transporter = transporter;\nemail.sender = \"test92.test@gmail.com\";\nemail.sendMail = sinon.stub().resolves();",
                  "err": {},
                  "uuid": "5bd43cca-5a44-4ee1-adb1-3c5dde2b2752",
                  "parentUUID": "2bb14a17-da7b-4ed3-a5b3-4723ae7b22ce",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"sendOTP\"",
                  "fullTitle": "Email sendOTP \"after each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "9d666f1e-ee8d-4938-b510-40ae6c75a92d",
                  "parentUUID": "2bb14a17-da7b-4ed3-a5b3-4723ae7b22ce",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send an OTP",
                  "fullTitle": "Email sendOTP should send an OTP",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const receiver = \"nish95.sha@gmail.com\";\nconst otp = \"123456\";\nemail.sendOTP(receiver, otp);\nexpect(\n  email.sendMail.calledOnceWithExactly(\n    receiver,\n    \"OTP\",\n    `Your OTP is ${otp}`\n  )\n).to.be.true;",
                  "err": {},
                  "uuid": "5ffb7f3c-4ceb-48c3-a3a8-a6a7a0d3edb4",
                  "parentUUID": "2bb14a17-da7b-4ed3-a5b3-4723ae7b22ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ffb7f3c-4ceb-48c3-a3a8-a6a7a0d3edb4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "custom-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "custom-report",
        "reportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}