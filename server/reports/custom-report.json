{
  "stats": {
    "suites": 28,
    "tests": 62,
    "passes": 62,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-04T13:37:15.255Z",
    "end": "2023-05-04T13:37:29.161Z",
    "duration": 13906,
    "testsRegistered": 62,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6a727fa0-c160-49a3-87b2-72f607162e2a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "125a9ace-77a4-431e-8556-327797baf7a2",
          "title": "Blog",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
          "file": "/test/blog.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4db04f66-7cda-472c-b1a2-4fc759c08710",
              "title": "postBlog",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"postBlog\"",
                  "fullTitle": "Blog postBlog \"before each\" hook in \"postBlog\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = {\n  body: {\n    userToken: \"validToken\",\n  },\n};\nres = {\n  send: stub(),\n};\n// Mocking adminJWT, adminDB, and blog objects\nadminJWT = {\n  verifyToken: stub(),\n};\nadminDB = {\n  insertOne: stub(),\n  blog: {},\n};\ntestBlog = new Blog(adminDB, adminJWT);\n// Importing the postBlog function",
                  "err": {},
                  "uuid": "d1c2afa9-a03d-419b-83f3-ba2b0e704515",
                  "parentUUID": "4db04f66-7cda-472c-b1a2-4fc759c08710",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"postBlog\"",
                  "fullTitle": "Blog postBlog \"after each\" hook in \"postBlog\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Restoring the stubbed functions\nrestore();",
                  "err": {},
                  "uuid": "f955dda8-08ae-445e-a5e8-093f61721717",
                  "parentUUID": "4db04f66-7cda-472c-b1a2-4fc759c08710",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should post a blog and send success response",
                  "fullTitle": "Blog postBlog should post a blog and send success response",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return handle and type\nadminJWT.verifyToken.returns({ handle: handle, type: type });\n// Stubbing adminDB.insertOne to return data\nadminDB.insertOne.returns({});\n// Calling the postBlog function\nawait testBlog.postBlog(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  adminDB.insertOne.calledOnceWith(adminDB.blog, match.instanceOf(blog))\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({ success: true, message: \"Blog posted.\" })\n).to.be.true;",
                  "err": {},
                  "uuid": "f9ca7143-6be3-4ff7-be9e-92b5e0c3c266",
                  "parentUUID": "4db04f66-7cda-472c-b1a2-4fc759c08710",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle TokenExpiredError and send appropriate response",
                  "fullTitle": "Blog postBlog should handle TokenExpiredError and send appropriate response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw TokenExpiredError\nadminJWT.verifyToken.throws(new TokenExpiredError(\"Token expired\"));\n// Calling the postBlog function\nawait testBlog.postBlog(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "303d25d9-0734-476a-861e-246708084471",
                  "parentUUID": "4db04f66-7cda-472c-b1a2-4fc759c08710",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors and send error response",
                  "fullTitle": "Blog postBlog should handle other errors and send error response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw an error\nadminJWT.verifyToken.throws(new Error(\"Some error\"));\n// Calling the postBlog function\nawait testBlog.postBlog(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Blog posting failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "54a033e7-d8e4-4d20-b539-128e39d68976",
                  "parentUUID": "4db04f66-7cda-472c-b1a2-4fc759c08710",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9ca7143-6be3-4ff7-be9e-92b5e0c3c266",
                "303d25d9-0734-476a-861e-246708084471",
                "54a033e7-d8e4-4d20-b539-128e39d68976"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "64287a29-7889-4307-8b30-8909fa78e1ce",
              "title": "postEditorial",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"postEditorial\"",
                  "fullTitle": "Blog postEditorial \"before each\" hook in \"postEditorial\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = {\n  body: {\n    userToken: \"validToken\",\n  },\n};\nres = {\n  send: stub(),\n};\n// Mocking adminJWT, adminDB, and editorial objects\nadminJWT = {\n  verifyToken: stub(),\n};\nadminDB = {\n  insertOne: stub(),\n  editorials: \"editorials\",\n};\ntestEditorial = new Blog(adminDB, adminJWT);\n// Importing the postEditorial function",
                  "err": {},
                  "uuid": "d2b65879-8e15-45c7-9ca4-367113ea9d89",
                  "parentUUID": "64287a29-7889-4307-8b30-8909fa78e1ce",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"postEditorial\"",
                  "fullTitle": "Blog postEditorial \"after each\" hook in \"postEditorial\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Restoring the stubbed functions\nrestore();",
                  "err": {},
                  "uuid": "247c2ae1-1258-4978-a137-e36c2b858a99",
                  "parentUUID": "64287a29-7889-4307-8b30-8909fa78e1ce",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should post an editorial and send success response",
                  "fullTitle": "Blog postEditorial should post an editorial and send success response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return handle and type\nadminJWT.verifyToken.returns({ handle: handle, type: \"1\" });\n// Stubbing adminDB.insertOne to return data\nadminDB.insertOne.returns({});\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  adminDB.insertOne.calledOnceWith(\n    adminDB.editorials,\n    match.instanceOf(editorial)\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({ success: true, message: \"Editorial posted.\" })\n).to.be.true;",
                  "err": {},
                  "uuid": "d19f8977-6b8c-4f3c-b028-373e6c8af502",
                  "parentUUID": "64287a29-7889-4307-8b30-8909fa78e1ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not post an editorial and send unauthorized response for type 0",
                  "fullTitle": "Blog postEditorial should not post an editorial and send unauthorized response for type 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return handle and type\nadminJWT.verifyToken.returns({ handle: handle, type: \"0\" });\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"You are not authorized to post editorials.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "c60a22cc-a82c-4bc0-803b-b17ed85d7c98",
                  "parentUUID": "64287a29-7889-4307-8b30-8909fa78e1ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle TokenExpiredError and send appropriate response",
                  "fullTitle": "Blog postEditorial should handle TokenExpiredError and send appropriate response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw TokenExpiredError\nadminJWT.verifyToken.throws(new TokenExpiredError(\"Token expired\"));\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "ace2c53c-d5ae-4a94-9c4b-388920db855b",
                  "parentUUID": "64287a29-7889-4307-8b30-8909fa78e1ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors and send error response",
                  "fullTitle": "Blog postEditorial should handle other errors and send error response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw an error\nadminJWT.verifyToken.throws(new Error(\"Some error\"));\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Editorial posting failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "6758f066-3c39-4fae-ac7f-503c1f663ca0",
                  "parentUUID": "64287a29-7889-4307-8b30-8909fa78e1ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors and send error response",
                  "fullTitle": "Blog postEditorial should handle other errors and send error response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw an error\nadminJWT.verifyToken.throws(new Error(\"Some error\"));\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Editorial posting failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "59fe2e35-115d-4f57-9277-60bd9583ecd0",
                  "parentUUID": "64287a29-7889-4307-8b30-8909fa78e1ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d19f8977-6b8c-4f3c-b028-373e6c8af502",
                "c60a22cc-a82c-4bc0-803b-b17ed85d7c98",
                "ace2c53c-d5ae-4a94-9c4b-388920db855b",
                "6758f066-3c39-4fae-ac7f-503c1f663ca0",
                "59fe2e35-115d-4f57-9277-60bd9583ecd0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1bdf311c-f924-44c5-bb68-0291f2bcf841",
              "title": "getBlogComments",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getBlogComments\"",
                  "fullTitle": "Blog getBlogComments \"before each\" hook in \"getBlogComments\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = {\n  body: {\n    blogId: \"validBlogId1\",\n  },\n};\nres = {\n  send: stub(),\n};\n// Mocking adminDB object\nadminDB = {\n  findOne: stub(),\n  blog: \"blog\",\n};\n// Importing the getBlogComments function\ntestBlog = new Blog(adminDB, {});",
                  "err": {},
                  "uuid": "798bdeb2-91cc-4084-b13a-acbcff79bee7",
                  "parentUUID": "1bdf311c-f924-44c5-bb68-0291f2bcf841",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get blog comments and send success response",
                  "fullTitle": "Blog getBlogComments should get blog comments and send success response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedComments = [\"comment1\", \"comment2\"];\n// Stubbing adminDB.findOne to return data with comments\nadminDB.findOne.returns({ comments: expectedComments });\n// Calling the getBlogComments function\nawait testBlog.getBlogComments(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(\n    adminDB.blog,\n    { _id: new ObjectId(\"validBlogId1\") },\n    { comments: 1, _id: 0 }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    data: expectedComments,\n    success: true,\n    message: \"Comments sent successfully.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "917fee09-c4cf-4b53-8f72-f41037b03266",
                  "parentUUID": "1bdf311c-f924-44c5-bb68-0291f2bcf841",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle error and send error response",
                  "fullTitle": "Blog getBlogComments should handle error and send error response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to throw an error\nadminDB.findOne.throws(new Error(\"Some error\"));\n// Calling the getBlogComments function\nawait testBlog.getBlogComments(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(\n    adminDB.blog,\n    { _id: new ObjectId(\"validBlogId1\") },\n    { comments: 1, _id: 0 }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Comments could not be sent due to some internal error.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "8c04dab9-b9b1-4741-8269-cbe10f009cf5",
                  "parentUUID": "1bdf311c-f924-44c5-bb68-0291f2bcf841",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "917fee09-c4cf-4b53-8f72-f41037b03266",
                "8c04dab9-b9b1-4741-8269-cbe10f009cf5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "da33e5b6-cbe8-4fed-9c95-4fd6733c7b12",
              "title": "getBlogs",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getBlogs\"",
                  "fullTitle": "Blog getBlogs \"before each\" hook in \"getBlogs\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking res object\nres = {\n  send: stub(),\n};\n// Mocking adminDB object\nadminDB = {\n  find:stub(),\n  blog: 'blog',\n};\n// Importing the getBlogs function\ntestBlog = new Blog(adminDB, {});",
                  "err": {},
                  "uuid": "2ba5038a-13bd-4f93-a6f5-86ccfaa6a320",
                  "parentUUID": "da33e5b6-cbe8-4fed-9c95-4fd6733c7b12",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get blogs and send success response",
                  "fullTitle": "Blog getBlogs should get blogs and send success response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedBlogs = ['blog1', 'blog2'];\n// Stubbing adminDB.find to return data with blogs\nadminDB.find.returns(expectedBlogs);\n// Calling the getBlogs function\nawait testBlog.getBlogs({}, res);\n// Assertions\nexpect(adminDB.find.calledOnceWith(adminDB.blog, {}, { timestamp: -1 }, { comments: 0 })).to.be.true;\nexpect(res.send.calledOnceWith({ data: expectedBlogs, success: true, message: 'Blogs sent successfully.' })).to.be.true;",
                  "err": {},
                  "uuid": "3a816a3b-783f-4c7c-9971-06da42e792fc",
                  "parentUUID": "da33e5b6-cbe8-4fed-9c95-4fd6733c7b12",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle error and send error response",
                  "fullTitle": "Blog getBlogs should handle error and send error response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.find to throw an error\nadminDB.find.throws(new Error('Some error'));\n// Calling the getBlogs function\nawait testBlog.getBlogs({}, res);\n// Assertions\nexpect(adminDB.find.calledOnceWith(adminDB.blog, {}, { timestamp: -1 }, { comments: 0 })).to.be.true;\nexpect(res.send.calledOnceWith({ success: false, message: 'Blogs could not be sent due to some internal error.' })).to.be.true;",
                  "err": {},
                  "uuid": "d51d4dd4-1f85-422e-bd2a-5dd71b87d02f",
                  "parentUUID": "da33e5b6-cbe8-4fed-9c95-4fd6733c7b12",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a816a3b-783f-4c7c-9971-06da42e792fc",
                "d51d4dd4-1f85-422e-bd2a-5dd71b87d02f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "461a3cb9-cbe4-41fe-9184-c32e2d422c63",
          "title": "database",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
          "file": "/test/database.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "37d53291-c0b3-4836-bc00-738e706d534e",
              "title": "connect",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"connect\"",
                  "fullTitle": "database connect \"before each\" hook in \"connect\"",
                  "timedOut": false,
                  "duration": 63,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();  \ntestDatabase = new database(uri,databaseName);",
                  "err": {},
                  "uuid": "fa0ee861-6612-4b84-b236-44e22b04bd72",
                  "parentUUID": "37d53291-c0b3-4836-bc00-738e706d534e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"connect\"",
                  "fullTitle": "database connect \"after each\" hook in \"connect\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mongoserver.stop();",
                  "err": {},
                  "uuid": "8a59e059-f71b-4b4e-afd2-6827a57df3e3",
                  "parentUUID": "37d53291-c0b3-4836-bc00-738e706d534e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should connect to the database",
                  "fullTitle": "database connect should connect to the database",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const consoleSpy = spy(console,\"log\");\nconst dbMock = {collection : stub()} // mock database collection\nconst clientMock = {\n    connect : stub().resolves() //returns a resolved promise (Which stimulates the condition when database is connected)\n, db : stub().returns(dbMock)}; //returns a mock database\ntestDatabase.client = clientMock;\nawait testDatabase.connect();\nexpect(clientMock.connect.calledOnce).to.be.true;\nexpect(consoleSpy.calledOnce).to.be.true;\nexpect(consoleSpy.firstCall.args[0]).to.equal(\"DB Connection successful\");\nexpect(clientMock.db.calledWith(databaseName)).to.be.true;\nexpect(dbMock.collection.calledWith(\"Users\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"otp\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Problems\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Blogs\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Editorials\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"SubmittedSolutions\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Solved\")).to.be.true;\nconsoleSpy.restore();",
                  "err": {},
                  "uuid": "e5dfd421-b49a-4ff1-8d45-5cb970df4036",
                  "parentUUID": "37d53291-c0b3-4836-bc00-738e706d534e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5dfd421-b49a-4ff1-8d45-5cb970df4036"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "322fe6f4-61a8-4fde-81fb-a4caa680c951",
              "title": "findOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"findOne\"",
                  "fullTitle": "database findOne \"before each\" hook in \"findOne\"",
                  "timedOut": false,
                  "duration": 61,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "9a2fb83d-54a4-4087-ad0c-100c32da1efd",
                  "parentUUID": "322fe6f4-61a8-4fde-81fb-a4caa680c951",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"findOne\"",
                  "fullTitle": "database findOne \"after each\" hook in \"findOne\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "3b0c1f96-d702-4340-833a-6e3579b26507",
                  "parentUUID": "322fe6f4-61a8-4fde-81fb-a4caa680c951",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return a document",
                  "fullTitle": "database findOne should return a document",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21 };\nawait testDatabase.users.insertOne(doc);\n      \n// Call the findOne function with the query object\nconst query = { name: 'user' };\nconst fields = { age:21, _id:0 };\nconst result = await testDatabase.findOne(testDatabase.users, query, fields);\n      \n// Assert that the result matches the expected document\nexpect (result).to.be.an('object');\n  expect (result).to.deep.equal({ age:21 });",
                  "err": {},
                  "uuid": "d32af6b8-5ee1-42a1-af0f-9d697e851888",
                  "parentUUID": "322fe6f4-61a8-4fde-81fb-a4caa680c951",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d32af6b8-5ee1-42a1-af0f-9d697e851888"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d91c647f-e435-458c-bec7-1a99de8d264a",
              "title": "insertOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"insertOne\"",
                  "fullTitle": "database insertOne \"before each\" hook in \"insertOne\"",
                  "timedOut": false,
                  "duration": 52,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "ec940042-ddce-47f5-875d-5d7839d6882e",
                  "parentUUID": "d91c647f-e435-458c-bec7-1a99de8d264a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"insertOne\"",
                  "fullTitle": "database insertOne \"after each\" hook in \"insertOne\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "fe56fa2d-7908-4f6b-bf19-779786a9e8a0",
                  "parentUUID": "d91c647f-e435-458c-bec7-1a99de8d264a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should insert a document",
                  "fullTitle": "database insertOne should insert a document",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21 };\nlet insertData = await testDatabase.insertOne(testDatabase.users,doc);\n  // Assert that the result matches the expected document\nexpect (insertData.acknowledged).to.equal(true);\nexpect (insertData.insertedId).to.not.equal(null | undefined);",
                  "err": {},
                  "uuid": "c3200703-2e6f-456c-872c-1ebd22a7ea23",
                  "parentUUID": "d91c647f-e435-458c-bec7-1a99de8d264a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c3200703-2e6f-456c-872c-1ebd22a7ea23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b728729-7728-40e7-8c2a-39eb9b5486d9",
              "title": "updateOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateOne\"",
                  "fullTitle": "database updateOne \"before each\" hook in \"updateOne\"",
                  "timedOut": false,
                  "duration": 48,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "cd5cb7a7-2841-4943-bffa-b037062a9e53",
                  "parentUUID": "8b728729-7728-40e7-8c2a-39eb9b5486d9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateOne\"",
                  "fullTitle": "database updateOne \"after each\" hook in \"updateOne\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "2e7100be-ec69-4c0d-b27a-4ee66ae9a160",
                  "parentUUID": "8b728729-7728-40e7-8c2a-39eb9b5486d9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return a document",
                  "fullTitle": "database updateOne should return a document",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21,hobby : []};\nawait testDatabase.users.insertOne(doc);\n    \n// Call the findOne function with the query object\nlet query = { name: 'user' };\nlet result = await testDatabase.updateOne(testDatabase.users, query, {$set : {name: \"newUser\"}});\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.modifiedCount).to.equal(1);\nquery = { name: 'newUser' };\nresult = await testDatabase.updateOne(testDatabase.users, query, {$push : {hobby: \"newUser\"}});\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.modifiedCount).to.equal(1);",
                  "err": {},
                  "uuid": "bb22ce0a-3ee6-4981-a4f7-70504bf790cd",
                  "parentUUID": "8b728729-7728-40e7-8c2a-39eb9b5486d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb22ce0a-3ee6-4981-a4f7-70504bf790cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c17c28f-ab88-4cc1-8790-cfd14d6ca728",
              "title": "deleteOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"deleteOne\"",
                  "fullTitle": "database deleteOne \"before each\" hook in \"deleteOne\"",
                  "timedOut": false,
                  "duration": 47,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "1cff506d-4430-45f8-9ec1-1c0447c8e336",
                  "parentUUID": "0c17c28f-ab88-4cc1-8790-cfd14d6ca728",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"deleteOne\"",
                  "fullTitle": "database deleteOne \"after each\" hook in \"deleteOne\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "c5183fea-ee88-4e90-b2d1-cada6ee09850",
                  "parentUUID": "0c17c28f-ab88-4cc1-8790-cfd14d6ca728",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should delete a document",
                  "fullTitle": "database deleteOne should delete a document",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21};\nawait testDatabase.users.insertOne(doc);\n    \n// Call the findOne function with the query object\nlet query = { name: 'user' };\nlet result = await testDatabase.deleteOne(testDatabase.users, query);\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.deletedCount).to.equal(1);",
                  "err": {},
                  "uuid": "9e669488-44fe-44c2-a909-0bbce01330e7",
                  "parentUUID": "0c17c28f-ab88-4cc1-8790-cfd14d6ca728",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e669488-44fe-44c2-a909-0bbce01330e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c72d649a-85ed-4c08-a2bd-a98de28d7eda",
              "title": "find",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"find\"",
                  "fullTitle": "database find \"before all\" hook in \"find\"",
                  "timedOut": false,
                  "duration": 56,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a test collection and insert some documents\nmongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.client.connect();\ntestDatabase.users = testDatabase.client.db(testDatabase.database).collection('users');\nawait testDatabase.users.insertMany([\n  { name: 'user1', age: 21 },\n  { name: 'user2', age: 22 },\n  { name: 'user3', age: 23 },\n]);",
                  "err": {},
                  "uuid": "8a45d53e-8b31-4728-933e-072bb3b094ba",
                  "parentUUID": "c72d649a-85ed-4c08-a2bd-a98de28d7eda",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"find\"",
                  "fullTitle": "database find \"after all\" hook in \"find\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.client.close();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "f097d057-a4d9-4925-8e46-521656204a4a",
                  "parentUUID": "c72d649a-85ed-4c08-a2bd-a98de28d7eda",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should find all documents in the collection",
                  "fullTitle": "database find should find all documents in the collection",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users);\nexpect(docs).to.have.lengthOf(3);",
                  "err": {},
                  "uuid": "9701c001-7bb6-4a57-a70c-8f375327114f",
                  "parentUUID": "c72d649a-85ed-4c08-a2bd-a98de28d7eda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should find documents with a query object",
                  "fullTitle": "database find should find documents with a query object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, { name: 'user1' });\nexpect(docs).to.have.lengthOf(1);\nexpect(docs[0].name).to.equal('user1');",
                  "err": {},
                  "uuid": "1621b871-2684-41ea-9d72-189cc64e1eb1",
                  "parentUUID": "c72d649a-85ed-4c08-a2bd-a98de28d7eda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should sort documents with a sort object",
                  "fullTitle": "database find should sort documents with a sort object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, {}, { age: -1 });\nexpect(docs).to.have.lengthOf(3);\nexpect(docs[0].name).to.equal('user3');",
                  "err": {},
                  "uuid": "7da6dc35-1a95-489a-ba61-9b98e2c893f7",
                  "parentUUID": "c72d649a-85ed-4c08-a2bd-a98de28d7eda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should project documents with a fields object",
                  "fullTitle": "database find should project documents with a fields object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, {}, {}, { name: 1 });\nexpect(docs).to.have.lengthOf(3);\nexpect(docs[0].name).to.exist;\nexpect(docs[0].age).to.not.exist;",
                  "err": {},
                  "uuid": "20115bf5-e044-4b32-bc56-5302b745a0e7",
                  "parentUUID": "c72d649a-85ed-4c08-a2bd-a98de28d7eda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9701c001-7bb6-4a57-a70c-8f375327114f",
                "1621b871-2684-41ea-9d72-189cc64e1eb1",
                "7da6dc35-1a95-489a-ba61-9b98e2c893f7",
                "20115bf5-e044-4b32-bc56-5302b745a0e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d66ec583-6e53-4de3-8f27-0299ba4fbb9e",
              "title": "update",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"update\"",
                  "fullTitle": "database update \"before all\" hook in \"update\"",
                  "timedOut": false,
                  "duration": 51,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a test collection and insert some documents\nmongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.client.connect();\ntestDatabase.users = testDatabase.client.db(testDatabase.database).collection('users');\nawait testDatabase.users.insertMany([\n  { name: 'user1', age: 21,hobby:[] },\n  { name: 'user2', age: 22 ,hobby:[]},\n  { name: 'user3', age: 23 ,hobby:[]},\n]);",
                  "err": {},
                  "uuid": "bc7e654e-7480-4ef8-a3e4-c5357f27b99c",
                  "parentUUID": "d66ec583-6e53-4de3-8f27-0299ba4fbb9e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"update\"",
                  "fullTitle": "database update \"after all\" hook in \"update\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.client.close();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "cb01fb84-8bc4-495c-bf25-56d607156339",
                  "parentUUID": "d66ec583-6e53-4de3-8f27-0299ba4fbb9e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should set some values to all the documents with the required filter",
                  "fullTitle": "database update should set some values to all the documents with the required filter",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.update(testDatabase.users, {  }, { $set: { age:50 } });\nexpect(docs.modifiedCount).to.equal(3);",
                  "err": {},
                  "uuid": "99e9b200-86ec-47cc-87c9-92754c3eeed2",
                  "parentUUID": "d66ec583-6e53-4de3-8f27-0299ba4fbb9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should push values in ana array to all the documents with the required filter",
                  "fullTitle": "database update should push values in ana array to all the documents with the required filter",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.update(testDatabase.users, { age: {$gt:21} }, { $push: { hobby:\"newHobby\" } });\nexpect(docs.modifiedCount).to.equal(3);",
                  "err": {},
                  "uuid": "fe21edaa-ab55-4cfa-b8e9-b527fbc105b8",
                  "parentUUID": "d66ec583-6e53-4de3-8f27-0299ba4fbb9e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99e9b200-86ec-47cc-87c9-92754c3eeed2",
                "fe21edaa-ab55-4cfa-b8e9-b527fbc105b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b4de0114-4fc6-4076-9f07-84c5cd41c12f",
          "title": "Email",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
          "file": "/test/email.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f67333a0-e979-4538-a37f-1130e85f196a",
              "title": "sendMail",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
              "file": "/test/email.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendMail\"",
                  "fullTitle": "Email sendMail \"before each\" hook in \"sendMail\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "transporter = nodemailer.createTransport(nodemailerMock());\nemail = new Email();\nemail.transporter = transporter;\nemail.sender = \"test92.test@gmail.com\";",
                  "err": {},
                  "uuid": "6472b94e-c1ba-4d97-9610-46fbfaf63024",
                  "parentUUID": "f67333a0-e979-4538-a37f-1130e85f196a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"sendMail\"",
                  "fullTitle": "Email sendMail \"after each\" hook in \"sendMail\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "8bda8038-c57b-4d46-843c-031e3c5c8068",
                  "parentUUID": "f67333a0-e979-4538-a37f-1130e85f196a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send an email",
                  "fullTitle": "Email sendMail should send an email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// to track the sendMail function of the email.transporter\nconst sendMailSpy = sinon.spy(email.transporter, \"sendMail\");\nconst receiver = \"nish95.sha@gmail.com\";\nconst subject = \"Test Email\";\nconst text = \"This is a test email.\";\n// call the sendMail function of the email class\nemail.sendMail(receiver, subject, text);\nexpect(sendMailSpy.calledOnce).to.be.true;\nexpect(sendMailSpy.firstCall.args[0]).to.deep.equal({\n  from: email.sender,\n  to: receiver,\n  subject: subject,\n  text: text,\n});",
                  "err": {},
                  "uuid": "5605b43f-55b2-410e-a582-c6a9b0fbcf94",
                  "parentUUID": "f67333a0-e979-4538-a37f-1130e85f196a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw the error if the email fails to send",
                  "fullTitle": "Email sendMail should throw the error if the email fails to send",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// mock the sendMail function of the email.transporter\nemail.transporter.sendMail = sinon\n  .stub()\n  .yields(\"Failed to send email.\");\n  // to call the callback function of the sendMail function with the error message\nconst receiver = \"recipient@example.com\";\nconst subject = \"Test email\";\nconst text = \"This is a test email.\";\nconst errorMessage = \"Failed to send email.\";\nexpect(() => {\n  email.sendMail(receiver, subject, text);\n}).to.throw(Error, errorMessage);",
                  "err": {},
                  "uuid": "117995b2-a217-4e01-a29c-15421ae0c4fd",
                  "parentUUID": "f67333a0-e979-4538-a37f-1130e85f196a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5605b43f-55b2-410e-a582-c6a9b0fbcf94",
                "117995b2-a217-4e01-a29c-15421ae0c4fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "267369e4-39d4-4dc9-a5f6-8396828acaa1",
              "title": "sendOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
              "file": "/test/email.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendOTP\"",
                  "fullTitle": "Email sendOTP \"before each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "transporter = nodemailer.createTransport(nodemailerMock());\nemail = new Email();\nemail.transporter = transporter;\nemail.sender = \"test92.test@gmail.com\";\nemail.sendMail = sinon.stub().resolves();",
                  "err": {},
                  "uuid": "a7d3a913-a186-48c0-b2c9-53b94130ab07",
                  "parentUUID": "267369e4-39d4-4dc9-a5f6-8396828acaa1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"sendOTP\"",
                  "fullTitle": "Email sendOTP \"after each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "e8ce2706-f7ac-41d1-aeba-30b3234cb1dd",
                  "parentUUID": "267369e4-39d4-4dc9-a5f6-8396828acaa1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send an OTP",
                  "fullTitle": "Email sendOTP should send an OTP",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const receiver = \"nish95.sha@gmail.com\";\nconst otp = \"123456\";\nemail.sendOTP(receiver, otp);\nexpect(\n  email.sendMail.calledOnceWithExactly(\n    receiver,\n    \"OTP\",\n    `Your OTP is ${otp}`\n  )\n).to.be.true;",
                  "err": {},
                  "uuid": "7621a359-a873-4e67-aa64-e6559f1a2115",
                  "parentUUID": "267369e4-39d4-4dc9-a5f6-8396828acaa1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7621a359-a873-4e67-aa64-e6559f1a2115"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4f83f62c-b2cb-4ed6-b389-530fc275e914",
          "title": "Problems",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
          "file": "/test/problem.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e9b63ce1-0082-44e8-a023-b0150a8422f1",
              "title": "handleCPP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"handleCPP\"",
                  "fullTitle": "Problems handleCPP \"before each\" hook in \"handleCPP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "res = {\n  send: sinon.stub(),\n};\nadminDB = {\n  findOne: sinon.stub(),\n  insertOne: sinon.stub(),\n  updateOne: sinon.stub(),\n};\ntestProblem = new Problem(adminDB,{});\nproblemId = \"644bc03d00e76ef0f3d3137f\";\ncode =\n`int sum(int a, int b) {return a+b;}`;\nlanguage = \"C++\";\nhandle = \"testHandle\";\ntimestamp = \"timastamp\";",
                  "err": {},
                  "uuid": "8e103af0-f44a-49ba-9e9a-679075c96e35",
                  "parentUUID": "e9b63ce1-0082-44e8-a023-b0150a8422f1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return accept for correct solution",
                  "fullTitle": "Problems handleCPP should return accept for correct solution",
                  "timedOut": false,
                  "duration": 13003,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(0);\nsetTimeout(done,13000)\n  adminDB.findOne.onFirstCall().returns({\n_id: new ObjectId(\"644bc03d00e76ef0f3d3137f\"),\nauthor_handle: 'nishant_89',\ntitle: 'Add numbers in an array',\ncontent: 'Add numbers in an array',\ncorrect_code_CPP: '#include <bits/stdc++.h>\\n' +\n  'using namespace std;\\n' +\n  'int sum(int a,int b){\\n' +\n  '    return a+b;\\n' +\n  '}\\n' +\n  'int main(){\\n' +\n  '    freopen(\"input.txt\", \"r\", stdin);                   \\n' +\n  '\\tfreopen(\"coutput.txt\", \"w\", stdout);\\n' +\n  '\\n' +\n  '    int t;\\n' +\n  'cin>>t;\\n' +\n  'while(t--){\\n' +\n  '\\t int a,b;\\n' +\n  '    cin>>a>>b;\\n' +\n  '    cout<<sum(a,b)<<\"\\\\n\";\\n' +\n  '}\\n' +\n  '   \\n' +\n  '    return 0;\\n' +\n  '}',\ncorrect_code_JAVA: 'import java.io.*;\\n' +\n  '\\n' +\n  'public class CorrectCode {\\n' +\n  '    public static void main(String[] args) {\\n' +\n  '        try {\\n' +\n  '            // Open input and output files\\n' +\n  '            BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\\n' +\n  '            BufferedWriter writer = new BufferedWriter(new FileWriter(\"coutput.txt\"));\\n' +\n  '\\n' +\n  '\\t\\t// Read first number from input file\\n' +\n  '            String line = reader.readLine();\\n' +\n  '            int t = Integer.parseInt(line);\\n' +\n  '\\n' +\n  '\\t\\twhile(t>0){\\n' +\n  '\\t\\t\\tString input = reader.readLine();\\n' +\n  '\\t\\t\\tString[] inputArray = input.split(\" \"); // splits the input by space\\n' +\n  '        \\t\\tint num1 = Integer.parseInt(inputArray[0]); // converts the first number to an integer\\n' +\n  '        \\t\\tint num2 = Integer.parseInt(inputArray[1]); \\n' +\n  '            \\n' +\n  '            \\twriter.write(num1+num2+\"\\\\n\");\\n' +\n  '            \\n' +\n  '            \\t// Close input and output files\\n' +\n  '\\t\\t\\tt--;\\n' +\n  '\\t\\t}\\n' +\n  '\\t\\treader.close();\\n' +\n  '            writer.close();\\n' +\n  '            \\n' +\n  '            \\n' +\n  '            \\n' +\n  '        } catch (IOException e) {\\n' +\n  '            e.printStackTrace();\\n' +\n  '        }\\n' +\n  '    }\\n' +\n  '}',\ntime_limit: 1,\ninput_format: 'input',\noutput_format: 'output',\nexample_input: 'sample_input',\nexample_output: 'sample_output',\nfunction_def_CPP: 'int sum(int a,int b){\\n}',\ninput_template_CPP: '#include <bits/stdc++.h>\\n' +\n  'using namespace std;\\n' +\n  '#include \"funcDef.h\"\\n' +\n  'int main(){\\n' +\n  '    freopen(\"input.txt\", \"r\", stdin);                   \\n' +\n  '\\tfreopen(\"output.txt\", \"w\", stdout);\\n' +\n  '\\t\\n' +\n  '    int t;\\n' +\n  '    cin>>t;\\n' +\n  '    while(t--){\\n' +\n  '\\tint a,b;\\n' +\n  '    cin>>a>>b;\\n' +\n  '    cout<<sum(a,b)<<\"\\\\n\";\\n' +\n  '    }\\n' +\n  '\\n' +\n  '    \\n' +\n  '    return 0;\\n' +\n  '}',\nfunction_def_JAVA: 'public class Solution {\\n' +\n  '    public static int add(int a, int b) {\\n' +\n  '        // Write your code here.\\n' +\n  '    }\\n' +\n  '}',\ninput_template_JAVA: 'import java.io.*;\\n' +\n  '\\n' +\n  'public class Func {\\n' +\n  '    public static void main(String[] args) {\\n' +\n  '        try {\\n' +\n  '            // Open input and output files\\n' +\n  '            BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\\n' +\n  '            BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"));\\n' +\n  '\\n' +\n  '\\t\\t// Read first number from input file\\n' +\n  '            String line = reader.readLine();\\n' +\n  '            int t = Integer.parseInt(line);\\n' +\n  '\\n' +\n  '\\t\\twhile(t>0){\\n' +\n  '\\t\\t\\tString input = reader.readLine();\\n' +\n  '\\t\\t\\tString[] inputArray = input.split(\" \"); // splits the input by space\\n' +\n  '        \\t\\tint num1 = Integer.parseInt(inputArray[0]); // converts the first number to an integer\\n' +\n  '        \\t\\tint num2 = Integer.parseInt(inputArray[1]); \\n' +\n  '            \\n' +\n  '            \\twriter.write(Solution.add(num1,num2)+\"\\\\n\");\\n' +\n  '\\t\\t\\tt--;\\n' +\n  '            \\n' +\n  '\\t\\t}\\n' +\n  '\\t\\t// Close input and output files\\n' +\n  '            \\treader.close();\\n' +\n  '            \\twriter.close();\\n' +\n  '            \\n' +\n  '            \\n' +\n  '            \\n' +\n  '        } catch (IOException e) {\\n' +\n  '            e.printStackTrace();\\n' +\n  '        }\\n' +\n  '    }\\n' +\n  '}',\ntestcases: '5\\n1 3\\n4 6\\n2 0\\n1 -1\\n2 3',\ntimestamp: \"2023-04-28T11:21:23.840Z\",\ntags: [ 'a', 'b' ],\nlevel: 'medium'\n      });\nadminDB.findOne.onSecondCall().returns({problems:[]})\n      adminDB.insertOne.returns({});\n      adminDB.updateOne.returns({});\n       testProblem.handleCPP(\nproblemId,\nhandle,\ncode,\ntimestamp,\nlanguage,\nres\n      )\n      setTimeout(() => {console.log(adminDB.findOne.callCount);}, 11000);\n// expect(res.send.calledOnceWith({ success: true, message: \"Accepted\" })).to.be.true;\n// expect(adminDB.findOne.calledOnceWith(adminDB.problem, { _id: new ObjectId(problemId) })).to.be.true;\n// expect(adminDB.insertOne.calledOnceWith(adminDB.solution, {\n//     problemId: new ObjectId(problemId),\n//     handle: handle,\n//     code: code,\n//     timestamp: timestamp,\n//     language: language,\n//     verdict: \"Accepted\",\n//     })).to.be.true;\n// expect(adminDB.updateOne.calledOnceWith(adminDB.solved, { handle: handle }, { $addToSet: { problems: new ObjectId(problemId) } })).to.be.false;",
                  "err": {},
                  "uuid": "c00094f0-f176-46c2-a1d9-6b31bf97c0a8",
                  "parentUUID": "e9b63ce1-0082-44e8-a023-b0150a8422f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c00094f0-f176-46c2-a1d9-6b31bf97c0a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13003,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bf2a2c47-03f2-4875-b590-5881ef592c0f",
          "title": "User",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
          "file": "/test/user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "366bd12e-c90b-4122-b12b-6ce86866fbdf",
              "title": "userLogin",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"userLogin\"",
                  "fullTitle": "User userLogin \"before each\" hook in \"userLogin\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  users: \"users\",\n  findOne: stub(),\n};\nadminJWT = {\n  createToken: stub(),\n};\nreq = {\n  body: {\n    email: email,\n    password: password,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, adminJWT);",
                  "err": {},
                  "uuid": "7684cb0f-3e03-4c32-9dea-0493fc3a950e",
                  "parentUUID": "366bd12e-c90b-4122-b12b-6ce86866fbdf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"userLogin\"",
                  "fullTitle": "User userLogin \"after each\" hook in \"userLogin\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "c9e8956a-9ab1-42c3-a1b5-e56e6102dc3e",
                  "parentUUID": "366bd12e-c90b-4122-b12b-6ce86866fbdf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send success response if login is successful",
                  "fullTitle": "User userLogin should send success response if login is successful",
                  "timedOut": false,
                  "duration": 122,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = bcrypt.hashSync(req.body.password, 10);\nadminDB.findOne.resolves({\n  email: req.body.email,\n  password: hashedPassword,\n  type: type,\n  handle: handle,\n});\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nadminJWT.createToken.returns(\"mockToken\");\nawait user.userLogin(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.calledOnce).to.be.true;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.true;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: true,\n  message: \"Login Successful\",\n  type: type,\n  userToken: \"mockToken\",\n});",
                  "err": {},
                  "uuid": "f305ec8d-05f1-4235-a068-5474000d4b8b",
                  "parentUUID": "366bd12e-c90b-4122-b12b-6ce86866fbdf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if password does not match",
                  "fullTitle": "User userLogin should send error response if password does not match",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = bcrypt.hashSync(\"\", 10);\nadminDB.findOne.resolves({\n  email: req.body.email,\n  password: hashedPassword,\n  type: type,\n  handle: handle,\n});\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nawait user.userLogin(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.calledOnce).to.be.true;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.false;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Invalid Email or Password\",\n});",
                  "err": {},
                  "uuid": "28df167c-39de-4060-884b-8b52b41e2e79",
                  "parentUUID": "366bd12e-c90b-4122-b12b-6ce86866fbdf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User userLogin should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.resolves(null);\nawait user.userLogin(req, res);\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.called).to.be.false;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.false;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Invalid Email or Password\",\n});",
                  "err": {},
                  "uuid": "bdfacdb6-980b-4176-a006-1f07e1b05695",
                  "parentUUID": "366bd12e-c90b-4122-b12b-6ce86866fbdf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if an error occurs",
                  "fullTitle": "User userLogin should send error response if an error occurs",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.rejects(new Error(\"Database error\"));\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nawait user.userLogin(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.called).to.be.false;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.false;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Database error\",\n});",
                  "err": {},
                  "uuid": "3cc2135f-1673-49dd-8eb9-155bea2714ce",
                  "parentUUID": "366bd12e-c90b-4122-b12b-6ce86866fbdf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f305ec8d-05f1-4235-a068-5474000d4b8b",
                "28df167c-39de-4060-884b-8b52b41e2e79",
                "bdfacdb6-980b-4176-a006-1f07e1b05695",
                "3cc2135f-1673-49dd-8eb9-155bea2714ce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 226,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1e3745a0-faa6-4eb1-88d8-696bb202624c",
              "title": "getUserDetails",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getUserDetails\"",
                  "fullTitle": "User getUserDetails \"before each\" hook in \"getUserDetails\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  users: \"users\",\n  findOne: stub(),\n};\nadminJWT = {\n  verifyToken: stub(),\n};\nreq = {\n  body: {\n    userToken: \"mockToken\",\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, adminJWT);",
                  "err": {},
                  "uuid": "b9bc6905-b938-4c14-98ed-04841b4962e7",
                  "parentUUID": "1e3745a0-faa6-4eb1-88d8-696bb202624c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"getUserDetails\"",
                  "fullTitle": "User getUserDetails \"after each\" hook in \"getUserDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "76c766d3-f76c-47cb-bf47-8c5243930783",
                  "parentUUID": "1e3745a0-faa6-4eb1-88d8-696bb202624c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send user details if token is valid and user exists",
                  "fullTitle": "User getUserDetails should send user details if token is valid and user exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodedToken = {\n  email: email,\n};\nadminJWT.verifyToken.returns(decodedToken);\nadminDB.findOne.resolves({ email: decodedToken.email });\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: decodedToken.email },\n    { password: 0, _id: 0 }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"User Details\",\n    user: { email: decodedToken.email },\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "b69ef70d-4b99-49da-bf6d-f49bcb215a43",
                  "parentUUID": "1e3745a0-faa6-4eb1-88d8-696bb202624c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if token is expired",
                  "fullTitle": "User getUserDetails should send error response if token is expired",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenExpiredError = new jwt.TokenExpiredError(\"Token has expired\");\nadminJWT.verifyToken.throws(tokenExpiredError);\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "d608ebea-6460-4b64-ad75-959aef97a356",
                  "parentUUID": "1e3745a0-faa6-4eb1-88d8-696bb202624c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if token is invalid",
                  "fullTitle": "User getUserDetails should send error response if token is invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const jsonWebTokenError = new jwt.JsonWebTokenError(\"Invalid token\");\nadminJWT.verifyToken.throws(jsonWebTokenError);\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User has logged out.Kindly login again\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "d07b6117-5f80-4673-9e9d-580735807d8f",
                  "parentUUID": "1e3745a0-faa6-4eb1-88d8-696bb202624c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if an error occurs",
                  "fullTitle": "User getUserDetails should send error response if an error occurs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = \"Database error\";\nadminJWT.verifyToken.throws(new Error(errorMessage));\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: errorMessage,\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "095d3921-24aa-484f-b9ed-ce22e1907424",
                  "parentUUID": "1e3745a0-faa6-4eb1-88d8-696bb202624c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b69ef70d-4b99-49da-bf6d-f49bcb215a43",
                "d608ebea-6460-4b64-ad75-959aef97a356",
                "d07b6117-5f80-4673-9e9d-580735807d8f",
                "095d3921-24aa-484f-b9ed-ce22e1907424"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73e726cd-7cfa-48de-bf26-b8f28f9cb71a",
              "title": "updateProfile",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateProfile\"",
                  "fullTitle": "User updateProfile \"before each\" hook in \"updateProfile\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: stub(),\n  updateOne: stub(),\n  users: \"users\",\n};\nadminJWT = {\n  verifyToken: stub(),\n};\nreq = {\n  body: {\n    userToken: userToken,\n    city: city,\n    birthdate: birthdate,\n    address: address,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, adminJWT);",
                  "err": {},
                  "uuid": "e5e2a100-f3be-480f-8eaa-fd288a5b6e02",
                  "parentUUID": "73e726cd-7cfa-48de-bf26-b8f28f9cb71a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateProfile\"",
                  "fullTitle": "User updateProfile \"after each\" hook in \"updateProfile\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "269a5173-2811-48e3-8ca3-8fe0c2632d52",
                  "parentUUID": "73e726cd-7cfa-48de-bf26-b8f28f9cb71a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should update profile if user exists and token is valid",
                  "fullTitle": "User updateProfile should update profile if user exists and token is valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodedToken = {\n  email: email,\n};\nadminJWT.verifyToken.returns(decodedToken);\nadminDB.findOne.resolves({ email: decodedToken.email });\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: decodedToken.email,\n  })\n).to.be.true;\nexpect(\n  adminDB.updateOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: decodedToken.email },\n    {\n      $set: {\n        city: req.body.city,\n        birthdate: req.body.birthdate,\n        address: req.body.address,\n      },\n    }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"Profile Updated Successfully\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "65280cd8-53a1-45a1-bf41-f674a50e6a47",
                  "parentUUID": "73e726cd-7cfa-48de-bf26-b8f28f9cb71a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if token is expired",
                  "fullTitle": "User updateProfile should send error response if token is expired",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenExpiredError = new TokenExpiredError(\"Token has expired\");\ntokenExpiredError.name = \"TokenExpiredError\";\nadminJWT.verifyToken.throws(tokenExpiredError);\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "bb249612-156b-4d52-a03f-8d23ad2dba9f",
                  "parentUUID": "73e726cd-7cfa-48de-bf26-b8f28f9cb71a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if an error occurs during update",
                  "fullTitle": "User updateProfile should send error response if an error occurs during update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = \"Database error\";\nadminJWT.verifyToken.throws(new Error(errorMessage));\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Profile Updation Failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "1ea510ac-3ce4-4e02-b243-d254835166e3",
                  "parentUUID": "73e726cd-7cfa-48de-bf26-b8f28f9cb71a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User updateProfile should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodedToken = {\n  email: \"test@example.com\",\n};\nadminJWT.verifyToken.returns(decodedToken);\nadminDB.findOne.resolves(null);\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: decodedToken.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User does not exists\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "eac2f317-7846-4d75-a594-1d2fcb3e9b73",
                  "parentUUID": "73e726cd-7cfa-48de-bf26-b8f28f9cb71a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65280cd8-53a1-45a1-bf41-f674a50e6a47",
                "bb249612-156b-4d52-a03f-8d23ad2dba9f",
                "1ea510ac-3ce4-4e02-b243-d254835166e3",
                "eac2f317-7846-4d75-a594-1d2fcb3e9b73"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30a50d23-198a-4d6b-89d0-2dca489a77b0",
              "title": "fillDetails",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"fillDetails\"",
                  "fullTitle": "User fillDetails \"before each\" hook in \"fillDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: stub(),\n  insertOne: stub(),\n  users: \"users\",\n};\nreq = {\n  body: {\n    email: email,\n    password: password,\n    name: \"user\",\n    handle: handle,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB);",
                  "err": {},
                  "uuid": "564806af-5bdf-4438-8f54-03b3a294af28",
                  "parentUUID": "30a50d23-198a-4d6b-89d0-2dca489a77b0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"fillDetails\"",
                  "fullTitle": "User fillDetails \"after each\" hook in \"fillDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "6a180988-88d4-44f4-956f-77690ff76941",
                  "parentUUID": "30a50d23-198a-4d6b-89d0-2dca489a77b0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send error response if user already exists",
                  "fullTitle": "User fillDetails should send error response if user already exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const existingUser = {\n  email: req.body.email,\n};\nadminDB.findOne.resolves(existingUser);\nawait user.fillDetails(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User already exists\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "5981df48-ea51-4987-bfd9-f176ec07a591",
                  "parentUUID": "30a50d23-198a-4d6b-89d0-2dca489a77b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if any required detail is missing",
                  "fullTitle": "User fillDetails should send error response if any required detail is missing",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.body.email = \"\";\nreq.body.password = \"\";\nreq.body.name = \"\";\nreq.body.handle = \"\";\nawait user.fillDetails(req, res);\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Please fill all the details.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "2e5f1c6a-0dc9-4a3d-88c5-400ab2f6bd99",
                  "parentUUID": "30a50d23-198a-4d6b-89d0-2dca489a77b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if bcrypt hash fails",
                  "fullTitle": "User fillDetails should send error response if bcrypt hash fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = \"Bcrypt hash failed\";\nstub(bcrypt, \"hash\").yields(new Error(errorMessage));\nawait user.fillDetails(req, res);\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User Registration Failed due to some internal error.\",\n  })\n).to.be.true;\nrestore();",
                  "err": {},
                  "uuid": "d2e0088f-12ef-4043-b174-41049482246b",
                  "parentUUID": "30a50d23-198a-4d6b-89d0-2dca489a77b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register the user if all details are provided and user does not exist",
                  "fullTitle": "User fillDetails should register the user if all details are provided and user does not exist",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = \"hashedPassword\";\nconst newUser = {\n  email: req.body.email,\n  password: hashedPassword,\n  name: req.body.name,\n  handle: req.body.handle,\n  type: \"0\",\n  city: null,\n  birthdate: null,\n  address: null,\n};\nstub(bcrypt, \"hash\").callsFake((_password, _len, callback) => {\n  callback(null, hashedPassword);\n});\nadminDB.findOne.resolves(null);\nawait user.fillDetails(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(bcrypt.hash.called).to.be.true;\nexpect(adminDB.insertOne.calledWithExactly(adminDB.users, newUser)).to.be\n  .true;\nexpect(\n  adminDB.insertOne.calledWithExactly(adminDB.solved, {\n    handle: req.body.handle,\n    problems: [],\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"User Registered Successfully\",\n  })\n).to.be.true;\nrestore();",
                  "err": {},
                  "uuid": "61f3402d-643d-40e4-a474-0c454a6f7642",
                  "parentUUID": "30a50d23-198a-4d6b-89d0-2dca489a77b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user registration fails",
                  "fullTitle": "User fillDetails should send error response if user registration fails",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = \"hashedPassword\";\nstub(bcrypt, \"hash\").callsFake((_password, _len, callback) => {\n  callback(null, hashedPassword);\n});\nadminDB.findOne.resolves(null);\nadminDB.insertOne.throws(new Error(\"Database error\"));\nawait user.fillDetails(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(bcrypt.hash.called).to.be.true;\nexpect(\n  adminDB.insertOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n    password: hashedPassword,\n    name: req.body.name,\n    handle: req.body.handle,\n    type: \"0\",\n    city: null,\n    birthdate: null,\n    address: null,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User Registration Failed\",\n  })\n).to.be.true;\nrestore();",
                  "err": {},
                  "uuid": "5d9f041b-b211-4f14-bd05-e4065b9adbfd",
                  "parentUUID": "30a50d23-198a-4d6b-89d0-2dca489a77b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5981df48-ea51-4987-bfd9-f176ec07a591",
                "2e5f1c6a-0dc9-4a3d-88c5-400ab2f6bd99",
                "d2e0088f-12ef-4043-b174-41049482246b",
                "61f3402d-643d-40e4-a474-0c454a6f7642",
                "5d9f041b-b211-4f14-bd05-e4065b9adbfd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e109dfc-0d63-45ee-88cd-0feb42d1faf1",
              "title": "verifyOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"verifyOTP\"",
                  "fullTitle": "User verifyOTP \"before each\" hook in \"verifyOTP\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: stub(),\n  deleteOne: stub(),\n  otp: \"otp\",\n};\nreq = {\n  body: {\n    email: email,\n    otp: otp,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, {}, {});",
                  "err": {},
                  "uuid": "9455fdc1-4bb0-4f13-ad83-c84cc01889a0",
                  "parentUUID": "7e109dfc-0d63-45ee-88cd-0feb42d1faf1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send success response if OTP matches",
                  "fullTitle": "User verifyOTP should send success response if OTP matches",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.resolves({\n  email: req.body.email,\n  otp: req.body.otp,\n});\nawait user.verifyOTP(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  adminDB.deleteOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"OTP Verified Successfully\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "c4ea0a8e-c498-43cd-a32b-08e2294a0baa",
                  "parentUUID": "7e109dfc-0d63-45ee-88cd-0feb42d1faf1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if OTP does not match",
                  "fullTitle": "User verifyOTP should send error response if OTP does not match",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.resolves({\n  email: req.body.email,\n  otp: \"wrongOTP\",\n});\nawait user.verifyOTP(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Invalid OTP\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "cc3d86de-a2f7-43af-9dac-f0db976532ed",
                  "parentUUID": "7e109dfc-0d63-45ee-88cd-0feb42d1faf1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if OTP verification fails",
                  "fullTitle": "User verifyOTP should send error response if OTP verification fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.throws(new Error(\"Database error\"));\nawait user.verifyOTP(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"OTP Verification Failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "b2bb6733-86e2-4415-a417-27e642433655",
                  "parentUUID": "7e109dfc-0d63-45ee-88cd-0feb42d1faf1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4ea0a8e-c498-43cd-a32b-08e2294a0baa",
                "cc3d86de-a2f7-43af-9dac-f0db976532ed",
                "b2bb6733-86e2-4415-a417-27e642433655"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f7c505ce-90c2-4e7d-85f6-04d5a5765e7d",
              "title": "sendOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendOTP\"",
                  "fullTitle": "User sendOTP \"before each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = { body: { email: email } };\nres = {\n  send: stub(),\n};\n// Mocking adminDB and adminMail objects\nadminDB = {\n  findOne: stub(),\n  updateOne: stub(),\n  insertOne: stub(),\n  users: \"users\",\n  otp: \"otp\",\n};\nadminMail = {\n  sendOTP: stub(),\n};\n// Importing the sendOTP function\nuser = new User(adminDB, {}, adminMail);",
                  "err": {},
                  "uuid": "985aa19e-e9e7-415a-9e45-528c62c84553",
                  "parentUUID": "f7c505ce-90c2-4e7d-85f6-04d5a5765e7d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send OTP and respond with success message if user does not exist",
                  "fullTitle": "User sendOTP should send OTP and respond with success message if user does not exist",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to return null (user does not exist)\nadminDB.findOne.returns(null);\nconst mathRandomStub = stub(Math, \"random\").returns(0.5);\nconst mathFloorStub = stub(Math, \"floor\").returns(500000);\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(adminDB.findOne.callCount).to.equal(2);\nexpect(\n  adminDB.findOne.calledWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(mathRandomStub.calledOnce).to.be.true;\nexpect(mathFloorStub.calledOnce).to.be.true;\nexpect(adminMail.sendOTP.calledOnceWith(req.body.email, 500000)).to.be\n  .true;\nexpect(\n  adminDB.findOne.calledWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  adminDB.insertOne.calledOnceWith(adminDB.otp, {\n    email: req.body.email,\n    otp: 500000,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: true,\n    message: \"OTP Sent Successfully\",\n  })\n).to.be.true;\nmathRandomStub.restore();\nmathFloorStub.restore();",
                  "err": {},
                  "uuid": "82e67582-11b9-4b4f-9103-08f4d604df76",
                  "parentUUID": "f7c505ce-90c2-4e7d-85f6-04d5a5765e7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send OTP and respond with success message if otp exists in the otp collection",
                  "fullTitle": "User sendOTP should send OTP and respond with success message if otp exists in the otp collection",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to return null (user does not exist)\nadminDB.findOne.onCall(0).returns(null);\nadminDB.findOne.onCall(1).returns(true);\nconst mathRandomStub = stub(Math, \"random\").returns(0.5);\nconst mathFloorStub = stub(Math, \"floor\").returns(500000);\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(mathRandomStub.calledOnce).to.be.true;\nexpect(mathFloorStub.calledOnce).to.be.true;\nexpect(adminMail.sendOTP.calledOnceWith(req.body.email, 500000)).to.be\n  .true;\nexpect(\n  adminDB.updateOne.calledOnceWith(\n    adminDB.otp,\n    { email: email },\n    { $set: { otp: 500000 } }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: true,\n    message: \"OTP Sent Successfully\",\n  })\n).to.be.true;\nmathRandomStub.restore();\nmathFloorStub.restore();",
                  "err": {},
                  "uuid": "c04f7a70-e095-49a2-8901-d1dc3c239368",
                  "parentUUID": "f7c505ce-90c2-4e7d-85f6-04d5a5765e7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user already exists",
                  "fullTitle": "User sendOTP should send error response if user already exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to return a user (user already exists)\nadminDB.findOne.returns({ email: email });\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(adminMail.sendOTP.notCalled).to.be.true;\nexpect(adminDB.insertOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"User already exists\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "183b6bcc-dc6d-4a75-9cee-e577a9720c2d",
                  "parentUUID": "f7c505ce-90c2-4e7d-85f6-04d5a5765e7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors and respond with failure message",
                  "fullTitle": "User sendOTP should handle errors and respond with failure message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to throw an error\nadminDB.findOne.throws(new Error(\"Database error\"));\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(adminMail.sendOTP.notCalled).to.be.true;\nexpect(adminDB.insertOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"OTP generation failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "115516a5-e73e-4494-a25c-6efcd9acf8e4",
                  "parentUUID": "f7c505ce-90c2-4e7d-85f6-04d5a5765e7d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82e67582-11b9-4b4f-9103-08f4d604df76",
                "c04f7a70-e095-49a2-8901-d1dc3c239368",
                "183b6bcc-dc6d-4a75-9cee-e577a9720c2d",
                "115516a5-e73e-4494-a25c-6efcd9acf8e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ee164260-1567-42dd-a010-df59a5e43a4b",
              "title": "changePassword",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"changePassword\"",
                  "fullTitle": "User changePassword \"before each\" hook in \"changePassword\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req = { body: { email: email, newPassword: newpassword } };\nres = {\n  send: stub(),\n};\nadminDB = {\n  findOne: stub(),\n  updateOne: stub(),\n  users: \"users\",\n};\nuser = new User(adminDB, {}, {});",
                  "err": {},
                  "uuid": "d588defe-fe20-4e7d-8436-5f07a65b1ff4",
                  "parentUUID": "ee164260-1567-42dd-a010-df59a5e43a4b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should change password and respond with success message if user exists",
                  "fullTitle": "User changePassword should change password and respond with success message if user exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.returns({ email: email });\nconst bcryptHashStub = stub(bcrypt, \"hash\")\n  .callsArgWith(2, null, hash);\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(bcrypt.hash.calledOnceWith(req.body.newPassword, 10)).to.be.true;\nexpect(\n  adminDB.updateOne.calledOnceWith(\n    adminDB.users,\n    { email: req.body.email },\n    { $set: { password: hash } }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: true,\n    message: \"Password Changed Successfully.\",\n  })\n).to.be.true;\nbcryptHashStub.restore();",
                  "err": {},
                  "uuid": "a578a562-562a-4f40-ada1-dc3c0e9a009c",
                  "parentUUID": "ee164260-1567-42dd-a010-df59a5e43a4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if bcrypt.hash encounters an error",
                  "fullTitle": "User changePassword should send error response if bcrypt.hash encounters an error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.returns({ email: email });\nconst bcryptHashStub = stub(bcrypt, \"hash\")\n  .callsArgWith(2, new Error(\"Hashing error\"));\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(bcrypt.hash.calledOnceWith(req.body.newPassword, 10)).to.be.true;\nexpect(adminDB.updateOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Password Updation Failed due to some internal error.\",\n  })\n).to.be.true;\nbcryptHashStub.restore();",
                  "err": {},
                  "uuid": "ddcf4136-1ad8-450c-baf9-8d13000f1d50",
                  "parentUUID": "ee164260-1567-42dd-a010-df59a5e43a4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User changePassword should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.returns(null);\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(adminDB.updateOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"User does not exists.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "bb74987c-a135-430d-9dcd-341ee82ec8f4",
                  "parentUUID": "ee164260-1567-42dd-a010-df59a5e43a4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors and respond with failure message",
                  "fullTitle": "User changePassword should handle errors and respond with failure message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.throws(new Error(\"Database error\"));\nconst bcryptHashStub = stub(bcrypt, \"hash\")\n  .callsArgWith(2, new Error(\"Hashing error\"));\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(bcrypt.hash.notCalled).to.be.true;\nexpect(adminDB.updateOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Password Updation Failed due to some internal error.\",\n  })\n).to.be.true;\nbcryptHashStub.restore();",
                  "err": {},
                  "uuid": "35be432c-7a19-46f7-b5d4-7824e0347401",
                  "parentUUID": "ee164260-1567-42dd-a010-df59a5e43a4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a578a562-562a-4f40-ada1-dc3c0e9a009c",
                "ddcf4136-1ad8-450c-baf9-8d13000f1d50",
                "bb74987c-a135-430d-9dcd-341ee82ec8f4",
                "35be432c-7a19-46f7-b5d4-7824e0347401"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2d6e6bc6-78d8-4237-942d-3946e51a1fd4",
              "title": "userLogout",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"userLogout\"",
                  "fullTitle": "User userLogout \"before each\" hook in \"userLogout\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = { body: { userToken: 'validToken' } };\nres = {\n  send: stub(),\n};\n  \n// Mocking adminJWT and adminDB objects\nadminJWT = {\n  verifyToken: stub(),\n};\n  \nadminDB = {\n  findOne: stub(),\n  users: 'users',\n};\n\n// Importing the userLogout function\nuser = new User(adminDB, adminJWT, {});",
                  "err": {},
                  "uuid": "8d917ec5-862e-4455-bd42-695663e80072",
                  "parentUUID": "2d6e6bc6-78d8-4237-942d-3946e51a1fd4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"userLogout\"",
                  "fullTitle": "User userLogout \"after each\" hook in \"userLogout\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Restoring the stubbed functions to their original implementation\nrestore();",
                  "err": {},
                  "uuid": "e2fef353-541c-4231-a16b-e46730505746",
                  "parentUUID": "2d6e6bc6-78d8-4237-942d-3946e51a1fd4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send success response if user exists",
                  "fullTitle": "User userLogout should send success response if user exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return email\nadminJWT.verifyToken.returns({ email: email });\n  \n// Stubbing adminDB.findOne to return user data\nadminDB.findOne.returns({ email: email });\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(adminDB.findOne.calledOnceWith(adminDB.users, { email: email })).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: true,\n  message: 'User Logged Out Successfully',\n  userToken: '',\n})).to.be.true;",
                  "err": {},
                  "uuid": "d41693c5-e014-4e3a-b7a3-01ee4b2e9eec",
                  "parentUUID": "2d6e6bc6-78d8-4237-942d-3946e51a1fd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User userLogout should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return email\nadminJWT.verifyToken.returns({ email: email });\n  \n// Stubbing adminDB.findOne to return null (user does not exist)\nadminDB.findOne.returns(null);\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(adminDB.findOne.calledOnceWith(adminDB.users, { email: email })).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'User does not exists',\n})).to.be.true;",
                  "err": {},
                  "uuid": "c0796739-305c-494d-979c-33618469eee4",
                  "parentUUID": "2d6e6bc6-78d8-4237-942d-3946e51a1fd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle TokenExpiredError and send appropriate response",
                  "fullTitle": "User userLogout should handle TokenExpiredError and send appropriate response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw TokenExpiredError\nadminJWT.verifyToken.throws(new TokenExpiredError('Token expired'));\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'User has been logged out.',\n})).to.be.true;",
                  "err": {},
                  "uuid": "e639b23f-4c8e-433e-8b91-6fccdae2df85",
                  "parentUUID": "2d6e6bc6-78d8-4237-942d-3946e51a1fd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle JsonWebTokenError and send appropriate response",
                  "fullTitle": "User userLogout should handle JsonWebTokenError and send appropriate response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw JsonWebTokenError\nadminJWT.verifyToken.throws(new JsonWebTokenError('Invalid token'));\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: \"User has logged out.Kindly login again\",\n})).to.be.true;",
                  "err": {},
                  "uuid": "4579b074-75ab-487d-8efb-26fd37d97774",
                  "parentUUID": "2d6e6bc6-78d8-4237-942d-3946e51a1fd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors and send appropriate response",
                  "fullTitle": "User userLogout should handle other errors and send appropriate response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw an error\nadminJWT.verifyToken.throws(new Error('Some error'));\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'Some error',\n})).to.be.true;",
                  "err": {},
                  "uuid": "30591e3f-2cd2-476f-bb55-d6cfeb7b40c4",
                  "parentUUID": "2d6e6bc6-78d8-4237-942d-3946e51a1fd4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d41693c5-e014-4e3a-b7a3-01ee4b2e9eec",
                "c0796739-305c-494d-979c-33618469eee4",
                "e639b23f-4c8e-433e-8b91-6fccdae2df85",
                "4579b074-75ab-487d-8efb-26fd37d97774",
                "30591e3f-2cd2-476f-bb55-d6cfeb7b40c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b19fb3d9-48f4-403a-8b02-5caf4f82a62e",
              "title": "getAllHandles",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getAllHandles\"",
                  "fullTitle": "User getAllHandles \"before each\" hook in \"getAllHandles\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = {};\nres = {\n  send: stub(),\n};\n  \n// Mocking adminDB object\nadminDB = {\n  find: stub(),\n  users: 'users',\n};\n  \nuser = new User(adminDB, {}, {});",
                  "err": {},
                  "uuid": "6c39604e-8cff-49c5-8253-3e599896c9b0",
                  "parentUUID": "b19fb3d9-48f4-403a-8b02-5caf4f82a62e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"getAllHandles\"",
                  "fullTitle": "User getAllHandles \"after each\" hook in \"getAllHandles\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Restoring the stubbed functions to their original implementation\nrestore();",
                  "err": {},
                  "uuid": "bc09ba05-4904-49c1-bc37-a204d30b4bad",
                  "parentUUID": "b19fb3d9-48f4-403a-8b02-5caf4f82a62e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should fetch all handles and send success response",
                  "fullTitle": "User getAllHandles should fetch all handles and send success response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.find to return user data\nconst users = [\n  { handle: 'handle1' },\n  { handle: 'handle2' },\n  { handle: 'handle3' },\n];\nadminDB.find.returns(users);\n  \n// Calling the getAllHandles function\nawait user.getAllHandles(req, res);\n  \n// Assertions\nexpect(adminDB.find.calledOnceWith(adminDB.users, {})).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: true,\n  message: 'All Handles',\n  handles: ['handle1', 'handle2', 'handle3'],\n})).to.be.true;",
                  "err": {},
                  "uuid": "a906c3ae-85d0-411b-9def-7b05ecbb8fbb",
                  "parentUUID": "b19fb3d9-48f4-403a-8b02-5caf4f82a62e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors and send error response",
                  "fullTitle": "User getAllHandles should handle errors and send error response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.find to throw an error\nadminDB.find.throws(new Error('Database error'));\n  \n// Calling the getAllHandles function\nawait user.getAllHandles(req, res);\n  \n// Assertions\nexpect(adminDB.find.calledOnceWith(adminDB.users, {})).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'Error in fetching handles',\n})).to.be.true;",
                  "err": {},
                  "uuid": "c05e761e-f177-409f-9ae3-0024df94b6ed",
                  "parentUUID": "b19fb3d9-48f4-403a-8b02-5caf4f82a62e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a906c3ae-85d0-411b-9def-7b05ecbb8fbb",
                "c05e761e-f177-409f-9ae3-0024df94b6ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "custom-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "custom-report",
        "reportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}